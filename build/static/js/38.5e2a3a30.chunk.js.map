{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/Input/Input.js","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","components/Comment/Comment.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Input","label","input","type","error","defaultValue","onKeyUp","style","width","className","ref","required","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","idCartoonUser","userGlobal","UserComment","v","user","index","malId","cookies","containerInputRefs","buttonSubmitRefs","marginLeft","userId","DeleteComment","CommentDetail","height","src","avatar","alt","timeSince","Date","createdAt","getTime","author","dangerouslySetInnerHTML","__html","textContent","onClick","forEach","current","display","disabled","chatStream","updateData","indexInputDisplayBlock","addInputReply","FormReply","inputAuthorRefs","inputRefs","marginBottom","onPaste","e","preventDefault","text","originalEvent","clipboardData","getData","document","execCommand","contentEditable","suppressContentEditableWarning","handleUpdateMessage","parseInt","replace","a","navBarStore","updateIsShowBlockPopUp","fetch","method","body","JSON","stringify","commentId","headers","authorization","currentState","currentPage","messages","lastPageComment","triggerFetch","message","response","data","alert","multipleCreateRefList","n","keys","map","createRef","inputAuthorElement","inputElement","elementMarginLeft","isPush","link","innerText","match","innerHTML","newMessage","value","now","toISOString","updateCurrentName","Comment","initialState","useState","chatState","setChatState","useCookies","useRef","inputAuthor","buttonSubmit","wrapperMessage","numberOfMessage","length","useEffect","username","subscription1","fetchPageMessage$","subscribe","lastPage","updatedData","updateMessages","unsubscribe","subscription2","subscription3","subscription","init","currentName","validateInput$","shouldFetchComment","getElementsByClassName","item","flexDirection","alignItems","key","nextPage","updateCurrentPage"],"mappings":"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","file":"static/js/38.5e2a3a30.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import \"./Input.css\";\r\nimport React from \"react\";\r\n\r\nconst Input = ({\r\n  label,\r\n  input,\r\n  type,\r\n  error = null,\r\n  defaultValue = \"\",\r\n  onKeyUp,\r\n}) => {\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      <div className=\"form-custom\">\r\n        <input\r\n          onKeyUp={onKeyUp}\r\n          defaultValue={defaultValue}\r\n          ref={input}\r\n          type={type || \"text\"}\r\n          required\r\n        />\r\n        <label className=\"label-name\">{label}</label>\r\n      </div>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import \"./Comment.css\";\r\n\r\nimport { nanoid } from \"nanoid\";\r\nimport React, { createRef, useEffect, useRef, useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nimport {\r\n  chatStream,\r\n  fetchPageMessage$,\r\n  timeSince,\r\n  validateInput$,\r\n} from \"../../epics/comment\";\r\nimport { updateCurrentName } from \"../../store/comment\";\r\nimport navBarStore from \"../../store/navbar\";\r\nimport Input from \"../Input/Input\";\r\n\r\n// import theaterStore from \"../../store/theater\";\r\n// const socket = theaterStore.socket;\r\nlet idCartoonUser;\r\nlet userGlobal;\r\n// let malIdGlobal;\r\n// socket.on(\"comment-change\", () => {\r\n//   fetchPageMessage$(malIdGlobal).subscribe((responseMessage) => {\r\n//     chatStream.updateMessages(responseMessage);\r\n//     chatStream.updateCurrentPage(chatStream.currentState().currentPage);\r\n//     allowShouldFetchComment(false);\r\n//   });\r\n// });\r\nfunction Comment({ malId, user }) {\r\n  userGlobal = user;\r\n  // malIdGlobal = malId;\r\n  chatStream.initialState.malId = malId;\r\n  let [chatState, setChatState] = useState(chatStream.initialState);\r\n  const [cookies] = useCookies([\"idCartoonUser\"]);\r\n  idCartoonUser = cookies && cookies.idCartoonUser;\r\n  const input = useRef();\r\n  const inputAuthor = useRef();\r\n  const buttonSubmit = useRef();\r\n  const wrapperMessage = useRef();\r\n  const numberOfMessage = chatState.messages.length;\r\n\r\n  const containerInputRefs = multipleCreateRefList(numberOfMessage);\r\n  const inputRefs = multipleCreateRefList(numberOfMessage);\r\n  const inputAuthorRefs = multipleCreateRefList(numberOfMessage);\r\n  const buttonSubmitRefs = multipleCreateRefList(numberOfMessage);\r\n  useEffect(() => {\r\n    return () => {\r\n      navBarStore.updateIsShowBlockPopUp(false);\r\n      chatStream.updateData({\r\n        messages: [],\r\n      });\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    if (user) updateCurrentName(user.username);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user]);\r\n  useEffect(() => {\r\n    let subscription1;\r\n    subscription1 = fetchPageMessage$(malId).subscribe(({ data, lastPage }) => {\r\n      const updatedData = [...chatStream.currentState().messages, ...data];\r\n      chatStream.updateMessages(updatedData, lastPage);\r\n      wrapperMessage.current.style.display = \"block\";\r\n    });\r\n    return () => {\r\n      subscription1 && subscription1.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chatState.currentPage, chatState.triggerFetch]);\r\n  useEffect(() => {\r\n    const subscription = chatStream.subscribe(setChatState);\r\n    chatStream.init();\r\n    let subscription2;\r\n    let subscription3;\r\n\r\n    if (user) {\r\n      inputAuthor.current.value = chatStream.currentState().currentName;\r\n      if (\r\n        chatState.indexInputDisplayBlock !== null &&\r\n        inputRefs[chatState.indexInputDisplayBlock] &&\r\n        inputAuthorRefs[chatState.indexInputDisplayBlock] &&\r\n        buttonSubmitRefs[chatState.indexInputDisplayBlock]\r\n      ) {\r\n        inputAuthorRefs[chatState.indexInputDisplayBlock].current.value =\r\n          chatStream.currentState().currentName;\r\n        subscription2 = validateInput$(\r\n          inputRefs[chatState.indexInputDisplayBlock].current,\r\n          inputAuthorRefs[chatState.indexInputDisplayBlock].current,\r\n          buttonSubmitRefs[chatState.indexInputDisplayBlock].current,\r\n          user\r\n        ).subscribe();\r\n      }\r\n\r\n      subscription3 = validateInput$(\r\n        input.current,\r\n        inputAuthor.current,\r\n        buttonSubmit.current\r\n      ).subscribe();\r\n    }\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      subscription2 && subscription2.unsubscribe();\r\n      subscription3 && subscription3.unsubscribe();\r\n    };\r\n  }, [\r\n    buttonSubmitRefs,\r\n    chatState.currentPage,\r\n    chatState.indexInputDisplayBlock,\r\n    chatState.shouldFetchComment,\r\n    inputAuthorRefs,\r\n    inputRefs,\r\n    user,\r\n  ]);\r\n  // console.log(allPos50pxMargin);\r\n\r\n  const e = document.getElementsByClassName(\"comment-button-see\").item(0);\r\n  if (e) {\r\n    if (chatState.currentPage >= chatState.lastPageComment) {\r\n      e.style.display = \"none\";\r\n    } else {\r\n      e.style.display = \"block\";\r\n    }\r\n  }\r\n  // console.log(chatStream.currentState());\r\n  return (\r\n    <div className=\"wrapper-messages\" ref={wrapperMessage}>\r\n      <h2>Comments</h2>\r\n      <div\r\n        style={{\r\n          marginBottom: \"50px\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"flex-end\",\r\n        }}\r\n      >\r\n        <Input label={\"Name\"} input={inputAuthor} />\r\n        <h2 style={{ width: \"100%\" }}>Your comment</h2>\r\n        <div className=\"textarea-comment-container\">\r\n          <div\r\n            className=\"textarea-comment\"\r\n            onPaste={(e) => {\r\n              e.preventDefault();\r\n              let text = (e.originalEvent || e).clipboardData.getData(\r\n                \"text/plain\"\r\n              );\r\n              document.execCommand(\"insertHTML\", false, text);\r\n            }}\r\n            ref={input}\r\n            contentEditable\r\n            suppressContentEditableWarning\r\n          />\r\n        </div>\r\n        {user && (\r\n          <button\r\n            className=\"btn btn-danger button-submit-comment\"\r\n            ref={buttonSubmit}\r\n            onClick={() => {\r\n              handleUpdateMessage(\r\n                malId,\r\n                inputAuthor.current,\r\n                input.current,\r\n                `${50}px`,\r\n                null,\r\n                false\r\n              );\r\n            }}\r\n          >\r\n            Submit\r\n          </button>\r\n        )}\r\n        {!user && <h3>You need to sign in to comment</h3>}\r\n      </div>\r\n      {chatState.messages.map((v, index) => {\r\n        return (\r\n          <div key={index}>\r\n            <UserComment\r\n              v={v}\r\n              user={user}\r\n              index={index}\r\n              malId={malId}\r\n              cookies={cookies}\r\n              containerInputRefs={containerInputRefs}\r\n              buttonSubmitRefs={buttonSubmitRefs}\r\n            />\r\n            <FormReply\r\n              containerInputRefs={containerInputRefs}\r\n              index={index}\r\n              v={v}\r\n              inputAuthorRefs={inputAuthorRefs}\r\n              inputRefs={inputRefs}\r\n              buttonSubmitRefs={buttonSubmitRefs}\r\n              malId={malId}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n      <div\r\n        className=\"comment-button-see\"\r\n        onClick={() => {\r\n          const nextPage = chatState.currentPage;\r\n          chatStream.updateCurrentPage(nextPage + 1);\r\n        }}\r\n      >\r\n        See more\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nfunction UserComment({\r\n  v,\r\n  user,\r\n  index,\r\n  malId,\r\n  cookies,\r\n  containerInputRefs,\r\n  buttonSubmitRefs,\r\n}) {\r\n  return (\r\n    <div style={{ marginLeft: v.marginLeft }} className=\"comment\">\r\n      {user && user.userId === v.userId && (\r\n        <DeleteComment v={v} malId={malId} cookies={cookies} />\r\n      )}\r\n      <CommentDetail\r\n        v={v}\r\n        user={user}\r\n        containerInputRefs={containerInputRefs}\r\n        buttonSubmitRefs={buttonSubmitRefs}\r\n        index={index}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CommentDetail({\r\n  v,\r\n  user,\r\n  containerInputRefs,\r\n  buttonSubmitRefs,\r\n  index,\r\n}) {\r\n  return (\r\n    <div>\r\n      <div className=\"container-avatar\">\r\n        <img\r\n          className=\"image-avatar\"\r\n          width={\"50\"}\r\n          height=\"50\"\r\n          src={\r\n            v.avatar ||\r\n            \"https://iupac.org/wp-content/uploads/2018/05/default-avatar.png\"\r\n          }\r\n          alt=\"image_avatar\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div className=\"time-since-comment\">\r\n          {timeSince(new Date(v.createdAt).getTime()) === \"Recently\"\r\n            ? `Recently`\r\n            : `${timeSince(new Date(v.createdAt).getTime())} ago`}\r\n        </div>\r\n        <div className=\"author\">{v.author}</div>\r\n        <div className=\"content-comment\">\r\n          <div dangerouslySetInnerHTML={{ __html: v.textContent }}></div>\r\n          <div\r\n            className=\"button-comment-reply\"\r\n            onClick={() =>\r\n              addInputReply(user, containerInputRefs, buttonSubmitRefs, index)\r\n            }\r\n          >\r\n            <i className=\"fas fa-reply fa-1x\"></i>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FormReply({\r\n  containerInputRefs,\r\n  index,\r\n  v,\r\n  inputAuthorRefs,\r\n  inputRefs,\r\n  buttonSubmitRefs,\r\n  malId,\r\n}) {\r\n  return (\r\n    <div\r\n      ref={containerInputRefs[index]}\r\n      style={{\r\n        marginLeft: v.marginLeft,\r\n        marginBottom: \"50px\",\r\n        display: \"none\",\r\n      }}\r\n    >\r\n      <Input label={\"Name\"} input={inputAuthorRefs[index]} />\r\n      <h1>Your comment</h1>\r\n      <div className=\"textarea-comment-container\">\r\n        <div\r\n          className=\"textarea-comment\"\r\n          onPaste={(e) => {\r\n            e.preventDefault();\r\n            let text = (e.originalEvent || e).clipboardData.getData(\r\n              \"text/plain\"\r\n            );\r\n            document.execCommand(\"insertHTML\", false, text);\r\n          }}\r\n          ref={inputRefs[index]}\r\n          contentEditable\r\n          suppressContentEditableWarning\r\n        />\r\n      </div>\r\n      <button\r\n        className=\"btn btn-danger button-submit-comment\"\r\n        ref={buttonSubmitRefs[index]}\r\n        onClick={() => {\r\n          handleUpdateMessage(\r\n            malId,\r\n            inputAuthorRefs[index].current,\r\n            inputRefs[index].current,\r\n            `${parseInt(v.marginLeft.replace(/px/g, \"\")) + 50}px`,\r\n            index\r\n          );\r\n          containerInputRefs[index].current.style.display = \"none\";\r\n        }}\r\n      >\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DeleteComment({ v, malId, cookies }) {\r\n  return (\r\n    <div\r\n      onClick={async () => {\r\n        navBarStore.updateIsShowBlockPopUp(true);\r\n        try {\r\n          await fetch(\"/api/movies/message/delete/\" + malId, {\r\n            method: \"PUT\",\r\n            body: JSON.stringify({\r\n              commentId: v.commentId,\r\n            }),\r\n            headers: {\r\n              authorization: `Bearer ${cookies.idCartoonUser}`,\r\n              \"Content-Type\":\"application/json\"\r\n            },\r\n          });\r\n          if (chatStream.currentState().currentPage !== 1) {\r\n            chatStream.updateData({\r\n              messages: [],\r\n              currentPage: 1,\r\n              lastPageComment: 1,\r\n            });\r\n          } else {\r\n            chatStream.updateData({\r\n              triggerFetch: !chatStream.currentState().triggerFetch,\r\n              messages: [],\r\n              lastPageComment: 1,\r\n            });\r\n          }\r\n          // chatStream.updateMessages(\r\n          //   messages.data.message,\r\n          //   chatStream.currentState().lastPageComment\r\n          // );\r\n        } catch (error) {\r\n          const { message } = error.response.data.error;\r\n          alert(message);\r\n          if (chatStream.currentState().currentPage !== 1) {\r\n            chatStream.updateData({\r\n              messages: [],\r\n              currentPage: 1,\r\n              lastPageComment: 1,\r\n            });\r\n          } else {\r\n            chatStream.updateData({\r\n              triggerFetch: !chatStream.currentState().triggerFetch,\r\n              messages: [],\r\n              lastPageComment: 1,\r\n            });\r\n          }\r\n          // chatStream.updateMessages(\r\n          //   comments,\r\n          //   chatStream.currentState().lastPageComment\r\n          // );\r\n        }\r\n        navBarStore.updateIsShowBlockPopUp(false);\r\n      }}\r\n      className=\"delete-symbol\"\r\n    >\r\n      X\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction addInputReply(user, containerInputRefs, buttonSubmitRefs, index) {\r\n  if (user) {\r\n    containerInputRefs.forEach((ref, index) => {\r\n      if (ref.current) {\r\n        ref.current.style.display = \"none\";\r\n        buttonSubmitRefs[index].current.disabled = true;\r\n      }\r\n    });\r\n    containerInputRefs[index].current.style.display = \"block\";\r\n    chatStream.updateData({\r\n      indexInputDisplayBlock: index,\r\n    });\r\n  }\r\n}\r\n\r\nfunction multipleCreateRefList(n) {\r\n  return Array.from(Array(n).keys()).map(() => createRef());\r\n}\r\nasync function handleUpdateMessage(\r\n  malId,\r\n  inputAuthorElement,\r\n  inputElement,\r\n  elementMarginLeft,\r\n  index,\r\n  isPush\r\n) {\r\n  const link = inputElement.innerText.match(\r\n    /http[s]?:\\/\\/(?:[a-z]|[0-9]|[$-_@.&+#]|[!*(),]|(?:%[0-9a-f][0-9a-f]))+/g\r\n  );\r\n  if (link) {\r\n    inputElement.innerHTML = inputElement.innerHTML.replace(\r\n      link[0],\r\n      `<a href=${link[0]} target=\"_blank\" style=\"color:white\">${link[0]}</a>`\r\n    );\r\n  }\r\n  const newMessage = {\r\n    userId: userGlobal.userId,\r\n    author: inputAuthorElement.value,\r\n    createdAt: new Date(Date.now()).toISOString(),\r\n    textContent: inputElement.innerHTML,\r\n    commentId: nanoid(),\r\n    marginLeft: elementMarginLeft,\r\n  };\r\n  updateCurrentName(newMessage.author);\r\n  const commentId = chatStream.currentState().messages[index]\r\n    ? chatStream.currentState().messages[index].commentId\r\n    : null;\r\n  try {\r\n    navBarStore.updateIsShowBlockPopUp(true);\r\n    await fetch(`/api/movies/${malId}`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify({\r\n        newMessage,\r\n        commentId,\r\n        isPush,\r\n      }),\r\n\r\n      headers: {\r\n        authorization: \"Bearer \" + idCartoonUser,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    if (chatStream.currentState().currentPage !== 1) {\r\n      chatStream.updateData({\r\n        messages: [],\r\n        currentPage: 1,\r\n        lastPageComment: 1,\r\n      });\r\n    } else {\r\n      chatStream.updateData({\r\n        triggerFetch: !chatStream.currentState().triggerFetch,\r\n        messages: [],\r\n        lastPageComment: 1,\r\n      });\r\n    }\r\n    inputElement.innerText = \"\";\r\n  } catch (error) {\r\n    const { message } = error.response.data.error;\r\n    alert(message);\r\n    if (chatStream.currentState().currentPage !== 1) {\r\n      chatStream.updateData({\r\n        messages: [],\r\n        currentPage: 1,\r\n        lastPageComment: 1,\r\n      });\r\n    } else {\r\n      chatStream.updateData({\r\n        triggerFetch: !chatStream.currentState().triggerFetch,\r\n        messages: [],\r\n        lastPageComment: 1,\r\n      });\r\n    }\r\n  }\r\n  navBarStore.updateIsShowBlockPopUp(false);\r\n}\r\n\r\nexport default Comment;\r\n"],"sourceRoot":""}