{"version":3,"sources":["store/caches.js","../../../../src/internal/util/TimeoutError.ts","util/checkMobileDevice.js","store/lazyLoadAnimeList.js","epics/lazyLoadAnimeList.js","components/AnimeList/AnimeList.js","../../../../src/internal/operators/timeoutWith.ts","../../../../src/internal/operators/timeout.ts","store/animeListSeason.js","epics/animeListSeason.js","../../../../src/internal/operators/startWith.ts","Functions/animeListSeason.js","components/PageNavList/PageNavList.js","components/AnimeListSeason/AnimeListSeason.js","Hook/animeListSeason.js"],"names":["initialState","behaviorSubject","BehaviorSubject","state","cachesStore","subscribe","setState","value","currentState","ans","updateData","obj","next","TimeoutErrorImpl","Error","message","mobileAndTabletCheck","a","check","navigator","userAgent","vendor","window","opera","test","substr","genreDetailData","pageOnDestroy","pageIsLoaded","isChangeView","isStopScrollingUpdated","currentPageOnDestroy","query","pageGenre","numberAnimeShowMore","parseInt","innerHeight","width","height","quantityItemPerRow","widthItem","heightItem","rowStart","rowEnd","widthContainerList","trigger","subject","lazyLoadAnimeListStream","pipe","v","init","data","updateDataQuick","keys","Object","forEach","key","fetchDataGenreAnimeList$","page","url","idCartoonUser","searchBy","method","replace","includes","headers","authorization","iif","genres","timer","map","filter","tap","mergeMapTo","mergeMap","ajax","timeout","pluck","catchError","of","error","updatePageScrollingWindow$","fromEvent","document","body","scrollHeight","scrollY","debounceTime","calculateRowStartEnd","containerListRef","offsetTopContainerList","current","offsetTop","currentRow","Math","ceil","numberRowToFillTheScreen","responsiveObject","maxWidth","minWidth","AnimeItem","loadable","handleResponsiveWidth","animeListRef","lazyLoadState","i","length","innerWidth","AnimeList","isWrap","lazy","empty","virtual","isAllowDelete","type","useRef","useEffect","subscription","takeWhile","unsubscribe","offsetWidth","ref","className","style","position","anime","index","slice","display","alignItems","justifyContent","top","left","styleAnimeItem","color","size","margin","fontSize","TimeoutWithOperator","withObservable","waitFor","scheduler","call","_super","TimeoutWithSubscriber","destination","_this","subscriber","prototype","scheduleTimeout","action","schedule","_next","_unsubscribe","source","currentSeason","numSeason","Date","now","getMonth","maxPage","dataDetail","dataDetailOriginal","modeFilter","score","genreId","currentPage","numberOfProduct","season","year","getFullYear","textSearch","screenWidth","currentYearOnDestroy","currentSeasonOnDestroy","isFetching","triggerScroll","isSmoothScroll","isInit","animeListSeasonStream","increaseCurrentPage","decreaseCurrentPage","updateSeasonYear","changeCurrentPage$","target","tagName","keyCode","shouldScrollToSeeMore","changeSeasonYear$","selectYearElement","selectSeasonElement","selectScoreElement","listenEventYear$","listenEventSeason$","listenEventScore$","from","startWith","combineAll","fetchAnimeSeason$","switchMapTo","pagination","last_visible_page","retry","array","isScheduler","initAnimeListSeason","setAnimeListState","filterAnimeList","animeListSeasonState","filteredData","fetchAnimeListSeason","listenWhenOptionChange","selectSeason","selectYear","selectScore","input","querySelector","trim","subscription4","subscription3","limitAdultGenre","genre","name","PageNavList","numberOfPagesDisplay","elementsLi","Array","floor","onClick","e","innerHTML","SelectFilterAnime","targetScroll","numberOfYears","elementOptions","scoreOptions","useListenWhenOptionChange","CircularProgress","zIndex","marginTop","textAlign","defaultValue","AnimeListSeason","useState","setAnimeListSeasonState","useFilterAnimeList","useFetchAnimeListSeason","scroll","capitalize","sort","b","aired","prop","month","day"],"mappings":"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","file":"static/js/22.807d534d.chunk.js","sourcesContent":["import { BehaviorSubject } from \"rxjs\";\r\nconst initialState = {};\r\nconst behaviorSubject = new BehaviorSubject(initialState);\r\nlet state = initialState;\r\nconst cachesStore = {\r\n  subscribe: (setState) =>\r\n    behaviorSubject.subscribe((value) => setState(value)),\r\n  currentState: () => {\r\n    let ans;\r\n    behaviorSubject.subscribe((value) => {\r\n      ans = value;\r\n    });\r\n    return ans;\r\n  },\r\n  updateData: (obj) => {\r\n    state = {\r\n      ...state,\r\n      ...obj,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n};\r\n\r\nexport default cachesStore;\r\n",null,"/* eslint-disable no-useless-escape */\r\nexport const mobileAndTabletCheck = () => {\r\n  let check = false;\r\n  (function (a) {\r\n    if (\r\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\r\n        a\r\n      ) ||\r\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\r\n        a.substr(0, 4)\r\n      )\r\n    )\r\n      check = true;\r\n  })(navigator.userAgent || navigator.vendor || window.opera);\r\n  return check;\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport { BehaviorSubject } from \"rxjs\";\r\nconst initialState = {\r\n  genreDetailData: [],\r\n  pageOnDestroy: null,\r\n  pageIsLoaded:null,\r\n  isChangeView: false,\r\n  isStopScrollingUpdated: false,\r\n  currentPageOnDestroy: null,\r\n  query:null,\r\n  pageGenre: 1,\r\n  numberAnimeShowMore: (parseInt(window.innerHeight / 376) + 1) * 5,\r\n  width: null,\r\n  height: null,\r\n  quantityItemPerRow: 5,\r\n  widthItem: null,\r\n  heightItem: null,\r\n  rowStart: 0,\r\n  rowEnd: 0,\r\n  widthContainerList: \"100%\",\r\n  trigger:true,\r\n};\r\n\r\nconst subject = new BehaviorSubject(initialState);\r\nlet state = initialState;\r\nconst lazyLoadAnimeListStore = {\r\n  initialState,\r\n  subscribe: (setState) => subject.pipe().subscribe((v) => setState(v)),\r\n  currentState: () => {\r\n    let ans;\r\n    subject.subscribe((v) => (ans = v));\r\n    return ans || initialState;\r\n  },\r\n  init: () => {\r\n    subject.next(state);\r\n  },\r\n  updateData: (data = initialState) => {\r\n    state = {\r\n      ...state,\r\n      ...data,\r\n    };\r\n    subject.next(state);\r\n  },\r\n  updateDataQuick: (data = initialState) => {\r\n    const keys = Object.keys(data);\r\n    keys.forEach((key) => {\r\n      state[key] = data[key];\r\n    });\r\n  },\r\n};\r\n\r\nexport default lazyLoadAnimeListStore;\r\n","import { fromEvent, iif, of, timer } from \"rxjs\";\r\nimport { ajax } from \"rxjs/ajax\";\r\nimport {\r\n  catchError,\r\n  debounceTime,\r\n  filter,\r\n  mergeMap,\r\n  mergeMapTo,\r\n  pluck,\r\n  tap,\r\n  timeout,\r\n  map,\r\n} from \"rxjs/operators\";\r\nimport cachesStore from \"../store/caches\";\r\n\r\nimport lazyLoadAnimeListStore from \"../store/lazyLoadAnimeList\";\r\n\r\nexport const lazyLoadAnimeListStream = lazyLoadAnimeListStore;\r\n\r\nexport function fetchDataGenreAnimeList$(\r\n  page,\r\n  url,\r\n  idCartoonUser,\r\n  searchBy,\r\n  query\r\n) {\r\n  let obj = {\r\n    method: \"GET\",\r\n    url: url.replace(\"{page}\", page),\r\n  };\r\n  if ([\"latest\", \"box\"].includes(searchBy)) {\r\n    obj.headers = {\r\n      authorization: `Bearer ${idCartoonUser}`,\r\n    };\r\n  }\r\n  return iif(\r\n    () =>\r\n      cachesStore.currentState().genres &&\r\n      cachesStore.currentState().genres[url.replace(\"{page}\", page)],\r\n    timer(0).pipe(\r\n      map(() => cachesStore.currentState().genres[url.replace(\"{page}\", page)])\r\n    ),\r\n    timer(0).pipe(\r\n      filter(() => page === parseInt(page)),\r\n      tap(() => {\r\n        lazyLoadAnimeListStream.updateData({\r\n          pageIsLoaded: page,\r\n        });\r\n      }),\r\n      mergeMapTo(\r\n        iif(\r\n          () =>\r\n            cachesStore.currentState().genres &&\r\n            cachesStore.currentState().genres[query] &&\r\n            cachesStore.currentState().genres[query][page],\r\n          timer(0).pipe(\r\n            map(() => cachesStore.currentState().genres[query][page])\r\n          ),\r\n          timer(0).pipe(\r\n            mergeMap(() =>\r\n              ajax(obj).pipe(\r\n                timeout(5000),\r\n                pluck(\"response\"),\r\n                catchError(() => {\r\n                  return of({ error: true });\r\n                })\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n\r\nexport function updatePageScrollingWindow$() {\r\n  return fromEvent(window, \"scroll\").pipe(\r\n    filter(\r\n      () =>\r\n        document.body.scrollHeight - (window.scrollY + window.innerHeight) < 0\r\n    ),\r\n    debounceTime(300)\r\n  );\r\n}\r\n\r\nexport function calculateRowStartEnd(containerListRef, heightItem) {\r\n  const offsetTopContainerList = containerListRef.current.offsetTop;\r\n  const currentRow = Math.ceil(\r\n    (-offsetTopContainerList + window.scrollY + window.innerHeight) / heightItem\r\n  );\r\n  const numberRowToFillTheScreen =\r\n    Math.ceil(window.innerHeight / heightItem) +\r\n    lazyLoadAnimeListStream.currentState().quantityItemPerRow;\r\n  const rowStart =\r\n    currentRow - numberRowToFillTheScreen >= 1\r\n      ? currentRow - numberRowToFillTheScreen\r\n      : 1;\r\n  const rowEnd = currentRow + numberRowToFillTheScreen;\r\n  return { rowStart, rowEnd };\r\n}\r\n","import \"./AnimeList.css\";\r\n\r\nimport loadable from \"@loadable/component\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { fromEvent, iif } from \"rxjs\";\r\n\r\nimport {\r\n  calculateRowStartEnd,\r\n  lazyLoadAnimeListStream,\r\n} from \"../../epics/lazyLoadAnimeList\";\r\nimport { debounceTime, takeWhile } from \"rxjs/operators\";\r\nimport { mobileAndTabletCheck } from \"../../util/checkMobileDevice\";\r\nconst responsiveObject = [\r\n  {\r\n    maxWidth: 100000,\r\n    minWidth: 1000,\r\n    quantityItemPerRow: 5,\r\n  },\r\n  {\r\n    maxWidth: 1000,\r\n    minWidth: 600,\r\n    quantityItemPerRow: 4,\r\n  },\r\n  {\r\n    maxWidth: 600,\r\n    minWidth: 500,\r\n    quantityItemPerRow: 3,\r\n  },\r\n  {\r\n    maxWidth: 500,\r\n    minWidth: 0,\r\n    quantityItemPerRow: 2,\r\n  },\r\n];\r\nconst AnimeItem = loadable(() => import(\"../AnimeItem/AnimeItem\"));\r\nconst AnimeList = ({\r\n  data,\r\n  error,\r\n  isWrap = true,\r\n  lazy = false,\r\n  empty = false,\r\n  virtual = false,\r\n  isAllowDelete = false,\r\n  searchBy,\r\n  type\r\n}) => {\r\n  const animeListRef = useRef();\r\n  const lazyLoadState = lazyLoadAnimeListStream.currentState();\r\n  useEffect(() => {\r\n    const subscription = iif(\r\n      () => mobileAndTabletCheck(),\r\n      fromEvent(window, \"scroll\").pipe(takeWhile(() => virtual)),\r\n      fromEvent(window, \"scroll\").pipe(\r\n        takeWhile(() => virtual),\r\n        debounceTime(50)\r\n      )\r\n    ).subscribe(() => {\r\n      const { rowStart, rowEnd } = calculateRowStartEnd(\r\n        animeListRef,\r\n        lazyLoadState.heightItem\r\n      );\r\n      if (\r\n        rowStart !== lazyLoadState.rowStart &&\r\n        rowEnd !== lazyLoadState.rowEnd\r\n      ) {\r\n        lazyLoadAnimeListStream.updateData({\r\n          rowStart,\r\n          rowEnd,\r\n        });\r\n      }\r\n    });\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [\r\n    lazyLoadState.heightItem,\r\n    lazyLoadState.rowEnd,\r\n    lazyLoadState.rowStart,\r\n    virtual,\r\n  ]);\r\n  useEffect(() => {\r\n    handleResponsiveWidth(animeListRef, lazyLoadState);\r\n    const subscription = fromEvent(window, \"resize\")\r\n      .pipe(debounceTime(500))\r\n      .subscribe(() => {\r\n        handleResponsiveWidth(animeListRef, lazyLoadState);\r\n      });\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [lazyLoadState.heightItem, lazyLoadState.rowEnd, lazyLoadState.rowStart]);\r\n  useEffect(() => {\r\n    if (!virtual) return;\r\n    const widthItem =\r\n      animeListRef.current.offsetWidth / lazyLoadState.quantityItemPerRow;\r\n    const heightItem = (widthItem * 340) / 224;\r\n    const height =\r\n      Math.ceil(\r\n        lazyLoadState.genreDetailData.length / lazyLoadState.quantityItemPerRow\r\n      ) * heightItem;\r\n    const { rowStart, rowEnd } = calculateRowStartEnd(animeListRef, heightItem);\r\n    lazyLoadAnimeListStream.updateData({\r\n      width: animeListRef.current.offsetWidth,\r\n      height,\r\n      widthItem,\r\n      heightItem,\r\n      rowStart: rowStart,\r\n      rowEnd: rowEnd,\r\n    });\r\n  }, [\r\n    lazyLoadState.heightItem,\r\n    lazyLoadState.quantityItemPerRow,\r\n    lazyLoadState.genreDetailData.length,\r\n    lazyLoadState.trigger,\r\n    virtual,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      ref={animeListRef}\r\n      className={isWrap ? \"list-anime\" : \"list-anime-nowrap\"}\r\n      style={{\r\n        position: virtual ? \"relative\" : \"static\",\r\n        height: lazyLoadState.height,\r\n        width: lazyLoadState.widthContainerList\r\n          ? lazyLoadState.widthContainerList\r\n          : 280,\r\n      }}\r\n    >\r\n      {data &&\r\n        !virtual &&\r\n        !error &&\r\n        data.map((anime, index) => {\r\n          return (\r\n            <AnimeItem\r\n              key={index}\r\n              anime={anime}\r\n              lazy={lazy}\r\n              searchBy={searchBy}\r\n              virtual={false}\r\n              isAllowDelete={isAllowDelete}\r\n              type={type}\r\n            />\r\n          );\r\n        })}\r\n      {data &&\r\n        virtual &&\r\n        !error &&\r\n        data\r\n          .slice(\r\n            (lazyLoadState.rowStart - 1) * lazyLoadState.quantityItemPerRow,\r\n            (lazyLoadState.rowEnd - 1) * lazyLoadState.quantityItemPerRow\r\n          )\r\n          .map((anime, index) => {\r\n            return (\r\n              <div\r\n                key={\r\n                  (lazyLoadState.rowStart - 1) *\r\n                    lazyLoadState.quantityItemPerRow +\r\n                  index\r\n                }\r\n                style={\r\n                  virtual\r\n                    ? {\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        height: lazyLoadState.heightItem,\r\n                        width: lazyLoadState.widthItem,\r\n                        position: \"absolute\",\r\n                        top:\r\n                          parseInt(\r\n                            ((lazyLoadState.rowStart - 1) *\r\n                              lazyLoadState.quantityItemPerRow +\r\n                              index) /\r\n                              lazyLoadState.quantityItemPerRow\r\n                          ) * lazyLoadState.heightItem,\r\n                        left:\r\n                          parseInt(\r\n                            ((lazyLoadState.rowStart - 1) *\r\n                              lazyLoadState.quantityItemPerRow +\r\n                              index) %\r\n                              lazyLoadState.quantityItemPerRow\r\n                          ) * lazyLoadState.widthItem,\r\n                      }\r\n                    : {}\r\n                }\r\n              >\r\n                <AnimeItem\r\n                type={type}\r\n                  anime={anime}\r\n                  lazy={lazy}\r\n                  virtual={true}\r\n                  isAllowDelete={isAllowDelete}\r\n                  styleAnimeItem={{ width: \"90%\", height: \"95%\" }}\r\n                  searchBy={searchBy}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n      {data && data.length === 0 && empty && (\r\n        <div className=\"empty\">\r\n          <CircularProgress color=\"secondary\" size=\"4rem\" />\r\n        </div>\r\n      )}\r\n      {error && (\r\n        <div\r\n          style={{\r\n            margin: \"100px auto 0 auto\",\r\n            color: \"white\",\r\n            fontSize: \"150%\",\r\n          }}\r\n        >\r\n          Anime is being updated...\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction handleResponsiveWidth(animeListRef, lazyLoadState) {\r\n  const { rowStart, rowEnd } = calculateRowStartEnd(\r\n    animeListRef,\r\n    lazyLoadState.heightItem\r\n  );\r\n  for (let i = 0; i < responsiveObject.length; i++) {\r\n    const { maxWidth, minWidth, quantityItemPerRow } = responsiveObject[i];\r\n    if (window.innerWidth < maxWidth && window.innerWidth > minWidth) {\r\n      lazyLoadAnimeListStream.updateData({\r\n        quantityItemPerRow,\r\n      });\r\n      break;\r\n    }\r\n  }\r\n  if (rowStart !== lazyLoadState.rowStart && rowEnd !== lazyLoadState.rowEnd) {\r\n    lazyLoadAnimeListStream.updateData({\r\n      rowStart,\r\n      rowEnd,\r\n    });\r\n  }\r\n  lazyLoadAnimeListStream.updateData({\r\n    trigger: !lazyLoadAnimeListStream.currentState().trigger,\r\n  });\r\n}\r\n\r\nexport default AnimeList;\r\n",null,null,"import { BehaviorSubject } from \"rxjs\";\r\nlet today = new Date(Date.now()).getMonth() + 1;\r\nlet currentSeason;\r\nlet numSeason = today / 3;\r\nif (numSeason <= 1) currentSeason = \"winter\";\r\nif (1 < numSeason && numSeason <= 2) currentSeason = \"spring\";\r\nif (2 < numSeason && numSeason <= 3) currentSeason = \"summer\";\r\nif (3 < numSeason) currentSeason = \"fall\";\r\n\r\nconst initialState = {\r\n  maxPage: 1,\r\n  dataDetail: [],\r\n  dataDetailOriginal: [],\r\n  modeFilter: \"filter\",\r\n  score: 0,\r\n  genreId: \"0\",\r\n  currentPage: 1,\r\n  numberOfProduct: 40,\r\n  season: currentSeason,\r\n  year: new Date(Date.now()).getFullYear(),\r\n  textSearch: \"\",\r\n  screenWidth: null,\r\n  currentPageOnDestroy: null,\r\n  currentYearOnDestroy: null,\r\n  currentSeasonOnDestroy: null,\r\n  isFetching: false,\r\n  triggerScroll: false,\r\n  isSmoothScroll: true,\r\n  isInit: true,\r\n};\r\nconst behaviorSubject = new BehaviorSubject(initialState);\r\n\r\nlet state = initialState;\r\n\r\nconst animeListSeasonStore = {\r\n  initialState,\r\n  subscribe: (setState) => behaviorSubject.subscribe((v) => setState(v)),\r\n  currentState: () => {\r\n    let ans;\r\n    behaviorSubject.subscribe((v) => {\r\n      ans = v;\r\n    });\r\n    return ans || initialState;\r\n  },\r\n  init: () => {\r\n    state = {\r\n      ...state,\r\n      screenWidth: window.innerWidth,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateData: (data = initialState) => {\r\n    state = {\r\n      ...state,\r\n      ...data,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateDataQuick: (data = initialState) => {\r\n    const keys = Object.keys(data);\r\n    keys.forEach((key) => {\r\n      state[key] = data[key];\r\n    });\r\n  },\r\n  increaseCurrentPage: () => {\r\n    state = {\r\n      ...state,\r\n      currentPage:\r\n        state.currentPage + 1 <= state.maxPage\r\n          ? state.currentPage + 1\r\n          : state.currentPage,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  decreaseCurrentPage: () => {\r\n    state = {\r\n      ...state,\r\n      currentPage:\r\n        state.currentPage - 1 > 0 ? state.currentPage - 1 : state.currentPage,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateSeasonYear: (season, year, score) => {\r\n    state = {\r\n      ...state,\r\n      season: season,\r\n      year: year,\r\n      score,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n};\r\n\r\nexport default animeListSeasonStore;\r\n","import { from, fromEvent, of, timer } from \"rxjs\";\r\nimport { ajax } from \"rxjs/ajax\";\r\nimport {\r\n  catchError,\r\n  combineAll,\r\n  filter,\r\n  map,\r\n  pluck,\r\n  retry,\r\n  startWith,\r\n  switchMapTo,\r\n} from \"rxjs/operators\";\r\n\r\nimport animeListSeasonStore from \"../store/animeListSeason\";\r\n\r\nexport const animeListSeasonStream = animeListSeasonStore;\r\n\r\nexport const changeCurrentPage$ = () => {\r\n  return fromEvent(document, \"keydown\").pipe(\r\n    filter((v) => v.target.tagName === \"BODY\"),\r\n    pluck(\"keyCode\"),\r\n    map((keyCode) => {\r\n      switch (keyCode) {\r\n        case 39:\r\n          animeListSeasonStream.increaseCurrentPage();\r\n          animeListSeasonStream.updateData({ shouldScrollToSeeMore: true });\r\n          return;\r\n        case 37:\r\n          animeListSeasonStream.decreaseCurrentPage();\r\n          animeListSeasonStream.updateData({ shouldScrollToSeeMore: true });\r\n          return;\r\n        default:\r\n          return;\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nexport const changeSeasonYear$ = (\r\n  selectYearElement,\r\n  selectSeasonElement,\r\n  selectScoreElement\r\n) => {\r\n  // console.log(\"change\")\r\n  const listenEventYear$ = fromEvent(selectYearElement, \"change\").pipe(\r\n    pluck(\"target\", \"value\"),\r\n    map((v) => parseInt(v))\r\n  );\r\n  const listenEventSeason$ = fromEvent(selectSeasonElement, \"change\").pipe(\r\n    pluck(\"target\", \"value\")\r\n  );\r\n  const listenEventScore$ = fromEvent(selectScoreElement, \"change\").pipe(\r\n    pluck(\"target\", \"value\"),\r\n    map((v) => parseInt(v))\r\n  );\r\n\r\n  return from([\r\n    listenEventYear$.pipe(startWith(animeListSeasonStream.currentState().year)),\r\n    listenEventSeason$.pipe(\r\n      startWith(animeListSeasonStream.currentState().season)\r\n    ),\r\n    listenEventScore$.pipe(\r\n      startWith(animeListSeasonStream.currentState().score)\r\n    ),\r\n  ]).pipe(combineAll());\r\n};\r\n\r\nexport const fetchAnimeSeason$ = (\r\n  year,\r\n  season,\r\n  page\r\n) => {\r\n  return timer(0).pipe(\r\n    switchMapTo(\r\n      ajax(\r\n        `https://api.jikan.moe/v4/seasons/${year}/${season}?page=${page}`\r\n      ).pipe(\r\n        pluck(\"response\"),\r\n        map((anime) => {\r\n          animeListSeasonStream.updateDataQuick({\r\n            maxPage: anime.pagination.last_visible_page,\r\n          });\r\n          return anime.data;\r\n          // // updateOriginalData(anime);\r\n          // console.log(anime);\r\n          // animeListSeasonStream.updateData({\r\n          //   dataDetailOriginal: anime,\r\n          // })\r\n          // anime = anime.filter((movie) => {\r\n          //   if (animeListSeasonStream.currentState().modeFilter === \"all\") {\r\n          //     return (\r\n          //       movie.airing_start &&\r\n          //       (checkAnimeIncludeGenre(\r\n          //         movie.genres,\r\n          //         animeListSeasonStream.currentState().genreId\r\n          //       ) ||\r\n          //         checkAnimeIncludeGenre(\r\n          //           movie.explicit_genres,\r\n          //           animeListSeasonStream.currentState().genreId\r\n          //         )) &&\r\n          //       (movie.score > score || score === 0)\r\n          //     );\r\n          //   }\r\n          //   return (\r\n          //     movie.airing_start &&\r\n          //     limitAdultGenre(movie.explicit_genres) &&\r\n          //     (checkAnimeIncludeGenre(\r\n          //       movie.genres,\r\n          //       animeListSeasonStream.currentState().genreId\r\n          //     ) ||\r\n          //       checkAnimeIncludeGenre(\r\n          //         movie.explicit_genres,\r\n          //         animeListSeasonStream.currentState().genreId\r\n          //       )) &&\r\n          //     (movie.score > score || score === 0)\r\n          //   );\r\n          // });\r\n          // animeListSeasonStream.updateDataQuick({\r\n          //   maxPage: Math.ceil(\r\n          //     anime.length / animeListSeasonStream.initialState.numberOfProduct\r\n          //   ),\r\n          // });\r\n          // let sortedArray = orderBy(anime, [\"airing_start\"], [\"desc\"]);\r\n          // const latestAiringIndex = sortedArray.findIndex(\r\n          //   (anime) =>\r\n          //     new Date(anime.airing_start).getTime() <=\r\n          //     new Date(Date.now()).getTime()\r\n          // );\r\n          // if (\r\n          //   animeListSeasonStream.initialState.year === year &&\r\n          //   animeListSeasonStream.initialState.season === season\r\n          // ) {\r\n          //   page = Math.ceil((latestAiringIndex + 1) / numberOfProducts);\r\n          //   animeListSeasonStream.updateData({ currentPage: page });\r\n          // } else {\r\n          //   animeListSeasonStream.updateData({ currentPage: 1 });\r\n          // }\r\n          // if (page === 0) page = 1;\r\n          // sortedArray = sortedArray.slice(\r\n          //   (page - 1) * numberOfProducts,\r\n          //   page * numberOfProducts\r\n          // );\r\n          // return sortedArray;\r\n        }),\r\n        retry(20),\r\n        catchError(() => {\r\n          return of([]);\r\n        })\r\n      )\r\n    )\r\n  );\r\n};\r\n",null,"import {\r\n  animeListSeasonStream,\r\n  changeCurrentPage$,\r\n  changeSeasonYear$,\r\n  fetchAnimeSeason$,\r\n} from \"../epics/animeListSeason\";\r\n\r\nexport const initAnimeListSeason = (setAnimeListState) => {\r\n  return () => {\r\n    const subscription = animeListSeasonStream.subscribe(setAnimeListState);\r\n    animeListSeasonStream.init();\r\n    // window.scroll({\r\n    //   top: 0,\r\n    // });\r\n    return () => {\r\n      animeListSeasonStream.updateData({ isInit: true });\r\n      subscription.unsubscribe();\r\n    };\r\n  };\r\n};\r\n\r\nexport const filterAnimeList = (\r\n  animeListSeasonState = animeListSeasonStream.currentState()\r\n) => {\r\n  return () => {\r\n    const { dataDetailOriginal } = animeListSeasonState;\r\n    const filteredData = dataDetailOriginal.filter(({ score }) => {\r\n      return (\r\n        (score === null && animeListSeasonState.score === 0) ||\r\n        score > animeListSeasonState.score\r\n      );\r\n    });\r\n    animeListSeasonStream.updateData({\r\n      dataDetail: filteredData,\r\n    });\r\n    if (\r\n      animeListSeasonStream.currentState().maxPage <\r\n      animeListSeasonStream.currentState().currentPage\r\n    ) {\r\n      animeListSeasonStream.updateData({ currentPage: 1 });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  };\r\n};\r\n\r\nlet subscription;\r\nexport const fetchAnimeListSeason = (\r\n  animeListSeasonState = animeListSeasonStream.currentState()\r\n) => {\r\n  return () => {\r\n    if (\r\n      animeListSeasonState.currentPage !==\r\n        animeListSeasonStream.currentState().currentPageOnDestroy ||\r\n      animeListSeasonState.season !==\r\n        animeListSeasonStream.currentState().currentSeasonOnDestroy ||\r\n      animeListSeasonState.year !==\r\n        animeListSeasonStream.currentState().currentYearOnDestroy\r\n    ) {\r\n      animeListSeasonStream.updateData({ isFetching: true });\r\n      subscription && subscription.unsubscribe();\r\n      subscription = fetchAnimeSeason$(\r\n        animeListSeasonState.year,\r\n        animeListSeasonState.season,\r\n        animeListSeasonState.currentPage,\r\n      ).subscribe((v) => {\r\n        if (!animeListSeasonStream.currentState().isInit) {\r\n          animeListSeasonStream.updateData({\r\n            triggerScroll: !animeListSeasonStream.currentState().triggerScroll,\r\n            isInit: false,\r\n          });\r\n        }\r\n        const filteredData = v.filter(({ score }) => {\r\n          return (\r\n            (score === null && animeListSeasonState.score === 0) ||\r\n            score > animeListSeasonState.score\r\n          );\r\n        });\r\n        if (\r\n          animeListSeasonState.season !==\r\n            animeListSeasonStream.currentState().currentSeasonOnDestroy ||\r\n          animeListSeasonState.year !==\r\n            animeListSeasonStream.currentState().currentYearOnDestroy\r\n        ) {\r\n          animeListSeasonStream.updateData({\r\n            currentPage: 1,\r\n          });\r\n        }\r\n        animeListSeasonStream.updateData({\r\n          dataDetail: filteredData,\r\n          dataDetailOriginal: v,\r\n          isFetching: false,\r\n          isSmoothScroll: false,\r\n        });\r\n        animeListSeasonStream.updateDataQuick({ isInit: false });\r\n        if (\r\n          animeListSeasonStream.currentState().maxPage <\r\n          animeListSeasonStream.currentState().currentPage\r\n        ) {\r\n          animeListSeasonStream.updateData({ currentPage: 1 });\r\n        }\r\n        animeListSeasonStream.updateDataQuick({\r\n          currentPageOnDestroy:\r\n            animeListSeasonStream.currentState().currentPage,\r\n          currentSeasonOnDestroy: animeListSeasonStream.currentState().season,\r\n          currentYearOnDestroy: animeListSeasonStream.currentState().year,\r\n        });\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  };\r\n};\r\n\r\nexport const listenWhenOptionChange = (\r\n  animeListSeasonState,\r\n  selectSeason,\r\n  selectYear,\r\n  selectScore\r\n) => {\r\n  return () => {\r\n    if (selectSeason.current && selectYear.current) {\r\n      selectSeason.current.value = animeListSeasonState.season;\r\n      selectYear.current.value = animeListSeasonState.year;\r\n    }\r\n    const input = document.querySelector(\".wrapper-search-anime-list input\");\r\n    if (input && input.value.trim() === \"\")\r\n      input.value = animeListSeasonState.textSearch;\r\n\r\n    const subscription3 = changeCurrentPage$().subscribe();\r\n    let subscription4;\r\n    if (selectYear.current && selectSeason.current && selectScore.current)\r\n      subscription4 = changeSeasonYear$(\r\n        selectYear.current,\r\n        selectSeason.current,\r\n        selectScore.current\r\n      ).subscribe(([year, season, score]) => {\r\n        if (!animeListSeasonStream.currentState().isInit)\r\n          animeListSeasonStream.updateData({\r\n            triggerScroll: !animeListSeasonStream.currentState().triggerScroll,\r\n            isSmoothScroll: false,\r\n            isInit: false,\r\n          });\r\n        animeListSeasonStream.updateSeasonYear(season, year, score);\r\n      });\r\n    return () => {\r\n      subscription4 && subscription4.unsubscribe();\r\n      subscription3.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  };\r\n};\r\n\r\nexport function checkAnimeIncludeGenre(genresAnime, genreCheckMalId) {\r\n  let check = false;\r\n  if (genreCheckMalId === \"0\") {\r\n    return true;\r\n  }\r\n  genresAnime.forEach((genre) => {\r\n    if (genre.mal_id.toString() === genreCheckMalId) {\r\n      check = true;\r\n    }\r\n  });\r\n  return check;\r\n}\r\n\r\nexport function limitAdultGenre(genres) {\r\n  let check = true;\r\n  genres.forEach((genre) => {\r\n    if (genre.name === \"Hentai\") {\r\n      check = false;\r\n    }\r\n  });\r\n  return check;\r\n}\r\n","import \"./PageNavList.css\";\r\n\r\nimport React from \"react\";\r\nimport { animeListSeasonStream } from \"../../epics/animeListSeason\";\r\n\r\nconst PageNavList = ({ numberOfPagesDisplay, animeListSeasonState }) => {\r\n  animeListSeasonState.currentPage === 0 &&\r\n    (animeListSeasonState.currentPage = 1);\r\n  const elementsLi = Array.from(Array(numberOfPagesDisplay).keys()).map((v) => {\r\n    if (\r\n      animeListSeasonState.currentPage <= Math.floor(numberOfPagesDisplay / 2)\r\n    ) {\r\n      return v + 1;\r\n    }\r\n    if (\r\n      animeListSeasonState.currentPage >=\r\n      animeListSeasonState.maxPage - Math.floor(numberOfPagesDisplay / 2)\r\n    ) {\r\n      return animeListSeasonState.maxPage - numberOfPagesDisplay + (v + 1);\r\n    }\r\n    return (\r\n      animeListSeasonState.currentPage -\r\n      Math.floor(numberOfPagesDisplay / 2) +\r\n      v\r\n    );\r\n  });\r\n  return (\r\n    elementsLi.length > 1 && (\r\n      <ul className=\"page-nav-list\">\r\n        <li\r\n          className={`page-nav-item`}\r\n          onClick={() => {\r\n            animeListSeasonStream.updateData({\r\n              currentPage: 1,\r\n              triggerScroll:\r\n                !animeListSeasonStream.currentState().triggerScroll,\r\n              isSmoothScroll: true,\r\n              isInit: false\r\n            });\r\n          }}\r\n        >\r\n          <i className=\"fas fa-chevron-left\"></i>\r\n          <i className=\"fas fa-chevron-left\"></i>\r\n        </li>\r\n\r\n        {elementsLi.map((page, index) => {\r\n          return (\r\n            <li\r\n              key={index}\r\n              onClick={(e) => {\r\n                if (\r\n                  animeListSeasonState.currentPage !==\r\n                  parseInt(e.target.innerHTML)\r\n                ) {\r\n                  animeListSeasonStream.updateData({\r\n                    currentPage: +e.target.innerHTML,\r\n                    triggerScroll:\r\n                      !animeListSeasonStream.currentState().triggerScroll,\r\n                    isSmoothScroll: true,\r\n                    isInit: false\r\n                  });\r\n                }\r\n              }}\r\n              className={`page-nav-item${\r\n                animeListSeasonState.currentPage === page ? \" active-page\" : \"\"\r\n              }`}\r\n            >\r\n              {page}\r\n            </li>\r\n          );\r\n        })}\r\n        <li\r\n          className={`page-nav-item`}\r\n          onClick={() => {\r\n            animeListSeasonStream.updateData({\r\n              triggerScroll:\r\n                !animeListSeasonStream.currentState().triggerScroll,\r\n              isSmoothScroll: true,\r\n              currentPage: animeListSeasonState.maxPage,\r\n              isInit: false\r\n            });\r\n          }}\r\n        >\r\n          <i className=\"fas fa-chevron-right\"></i>\r\n          <i className=\"fas fa-chevron-right\"></i>\r\n        </li>\r\n      </ul>\r\n    )\r\n  );\r\n};\r\n\r\nexport default PageNavList;\r\n","import \"./AnimeListSeason.css\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport capitalize from \"lodash/capitalize\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { animeListSeasonStream } from \"../../epics/animeListSeason\";\r\nimport {\r\n  useFetchAnimeListSeason,\r\n  useFilterAnimeList,\r\n  useInitAnimeListSeason,\r\n  useListenWhenOptionChange,\r\n} from \"../../Hook/animeListSeason\";\r\nimport AnimeList from \"../AnimeList/AnimeList\";\r\nimport PageNavList from \"../PageNavList/PageNavList\";\r\n\r\nconst AnimeListSeason = () => {\r\n  const [animeListSeasonState, setAnimeListSeasonState] = useState(\r\n    animeListSeasonStream.currentState()\r\n  );\r\n  const targetScroll = useRef(null);\r\n\r\n  const startYear = 1964;\r\n  const endYear = new Date(Date.now()).getFullYear() + 1;\r\n  const numberOfYears = endYear - startYear + 1;\r\n  let numberOfPagesDisplay;\r\n  if (animeListSeasonStream.currentState().screenWidth > 354) {\r\n    numberOfPagesDisplay =\r\n      animeListSeasonState.maxPage < 4 ? animeListSeasonState.maxPage : 4;\r\n  } else if (animeListSeasonStream.currentState().screenWidth > 305) {\r\n    numberOfPagesDisplay =\r\n      animeListSeasonState.maxPage < 3 ? animeListSeasonState.maxPage : 3;\r\n  } else {\r\n    numberOfPagesDisplay =\r\n      animeListSeasonState.maxPage < 2 ? animeListSeasonState.maxPage : 2;\r\n  }\r\n  useInitAnimeListSeason(setAnimeListSeasonState);\r\n  useFilterAnimeList(animeListSeasonState);\r\n  useFetchAnimeListSeason(animeListSeasonState);\r\n  useEffect(() => {\r\n    if (!animeListSeasonState.isInit) {\r\n      window.scroll({\r\n        top: targetScroll.current.offsetTop - 170,\r\n      });\r\n      animeListSeasonStream.updateDataQuick({\r\n        isSmoothScroll: true,\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [animeListSeasonState.triggerScroll]);\r\n  return (\r\n    <div style={{ width: \"100%\" }} className=\"anime-list-season-container\">\r\n      <h1 style={{ textAlign: \"center\" }}>\r\n        Anime\r\n        {animeListSeasonState.score !== 0\r\n          ? \" with score greater than \" + animeListSeasonState.score\r\n          : \"\"}{\" \"}\r\n        in {capitalize(animeListSeasonState.season)},{\" \"}\r\n        {animeListSeasonState.year}\r\n      </h1>\r\n      <SelectFilterAnime\r\n        targetScroll={targetScroll}\r\n        animeListSeasonState={animeListSeasonState}\r\n        numberOfYears={numberOfYears}\r\n      />\r\n\r\n      <PageNavList\r\n        numberOfPagesDisplay={numberOfPagesDisplay}\r\n        animeListSeasonState={animeListSeasonState}\r\n      />\r\n      {animeListSeasonState.dataDetail.length === 0 && (\r\n        <h1 style={{ textAlign: \"center\" }}>...</h1>\r\n      )}\r\n      <AnimeList\r\n        lazy={\r\n          animeListSeasonState.currentPage !==\r\n            animeListSeasonState.currentPageOnDestroy ||\r\n          animeListSeasonState.season !==\r\n            animeListSeasonState.currentSeasonOnDestroy ||\r\n          animeListSeasonState.year !==\r\n            animeListSeasonState.currentYearOnDestroy\r\n        }\r\n        data={animeListSeasonState.dataDetail.sort(\r\n          (a, b) =>\r\n            -(a.aired.prop.from.month * 30 + a.aired.prop.from.day) +\r\n            (b.aired.prop.from.month * 30 + b.aired.prop.from.day)\r\n        )}\r\n        error={animeListSeasonState.error || null}\r\n        empty={false}\r\n        searchBy={\"anime\"}\r\n      />\r\n      <PageNavList\r\n        numberOfPagesDisplay={numberOfPagesDisplay}\r\n        animeListSeasonState={animeListSeasonState}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction SelectFilterAnime({\r\n  targetScroll,\r\n  animeListSeasonState = animeListSeasonStream.currentState(),\r\n  numberOfYears,\r\n}) {\r\n  const selectYear = useRef(null);\r\n  const selectSeason = useRef(null);\r\n  const selectScore = useRef(null);\r\n  const elementOptions = Array.from(Array(numberOfYears).keys()).map(\r\n    (v) => new Date(Date.now()).getFullYear() + 1 - v\r\n  );\r\n  const scoreOptions = Array.from(Array(10).keys());\r\n  useListenWhenOptionChange(\r\n    animeListSeasonState,\r\n    selectSeason,\r\n    selectYear,\r\n    selectScore\r\n  );\r\n  return (\r\n    <div ref={targetScroll}>\r\n      {animeListSeasonState.isFetching && (\r\n        <CircularProgress\r\n          style={{\r\n            position: \"fixed\",\r\n            left: 0,\r\n            top: 0,\r\n            zIndex: 10,\r\n          }}\r\n          color=\"secondary\"\r\n          size=\"5rem\"\r\n        />\r\n      )}\r\n      <div\r\n        style={{\r\n          marginTop: \"10px\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <select\r\n          className=\"select-filter\"\r\n          defaultValue={`${animeListSeasonState.season}`}\r\n          ref={selectSeason}\r\n          // disabled={animeListSeasonState.isFetching}\r\n        >\r\n          <option value=\"winter\">winter</option>\r\n          <option value=\"spring\">spring</option>\r\n          <option value=\"summer\">summer</option>\r\n          <option value=\"fall\">fall</option>\r\n        </select>\r\n        <select\r\n          // disabled={animeListSeasonState.isFetching}\r\n          className=\"select-filter\"\r\n          defaultValue={`${animeListSeasonState.year}`}\r\n          ref={selectYear}\r\n        >\r\n          {elementOptions.map((v, index) => {\r\n            return (\r\n              <option key={index} value={`${v}`}>\r\n                {v}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n        <select\r\n          className=\"select-filter\"\r\n          defaultValue={`${animeListSeasonStream.currentState().score}`}\r\n          ref={selectScore}\r\n          // disabled={animeListSeasonState.isFetching}\r\n        >\r\n          {scoreOptions.map((score, key) => (\r\n            <option key={key} value={`${score}`}>\r\n              {score !== 0 ? score : \"Score\"}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnimeListSeason;\r\n","import { useEffect } from \"react\";\r\n\r\nimport {\r\n  fetchAnimeListSeason,\r\n  filterAnimeList,\r\n  initAnimeListSeason,\r\n  listenWhenOptionChange,\r\n} from \"../Functions/animeListSeason\";\r\n\r\nexport const useInitAnimeListSeason = (setAnimeListState) => {\r\n  useEffect(initAnimeListSeason(setAnimeListState), []);\r\n};\r\n\r\nexport const useFilterAnimeList = (animeListSeasonState) => {\r\n  useEffect(filterAnimeList(animeListSeasonState), [\r\n    animeListSeasonState.score,\r\n    animeListSeasonState.modeFilter,\r\n  ]);\r\n};\r\n\r\nexport const useFetchAnimeListSeason = (animeListSeasonState) => {\r\n  useEffect(fetchAnimeListSeason(animeListSeasonState), [\r\n    animeListSeasonState.year,\r\n    animeListSeasonState.season,\r\n    animeListSeasonState.numberOfProduct,\r\n    animeListSeasonState.currentPage\r\n  ]);\r\n};\r\n\r\nexport const useListenWhenOptionChange = (\r\n  animeListSeasonState,\r\n  selectSeason,\r\n  selectYear,\r\n  selectScore,\r\n) => {\r\n  useEffect(\r\n    listenWhenOptionChange(\r\n      animeListSeasonState,\r\n      selectSeason,\r\n      selectYear,\r\n      selectScore,\r\n    ),\r\n    [animeListSeasonState.screenWidth]\r\n  );\r\n};\r\n"],"sourceRoot":""}