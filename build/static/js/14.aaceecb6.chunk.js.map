{"version":3,"sources":["../../../../src/internal/operators/switchMap.ts","../../../../src/internal/observable/combineLatest.ts","../../../src/internal/OuterSubscriber.ts","../../../src/internal/InnerSubscriber.ts","../../../../src/internal/util/subscribeToResult.ts","../../../../src/internal/operators/mergeAll.ts","../../../../src/internal/observable/concat.ts","../../../../src/internal/operators/concatAll.ts","store/updatedAnime.js","epics/updatedAnime.js","components/AnimeItem/AnimeItem.js","../../../../src/internal/operators/switchMapTo.ts","../../../../src/internal/operators/combineAll.ts","../../../../src/internal/observable/interval.ts","store/animeListSeason.js","epics/animeListSeason.js","store/upcomingAnimeList.js","epics/upcomingAnimeList.js","../../../../src/internal/operators/startWith.ts","Functions/animeListSeason.js"],"names":["switchMap","project","resultSelector","SwitchMapOperator","prototype","call","source","SwitchMapSubscriber","_super","destination","_this","tslib_1","result","index","error","_innerSub","innerSubscription","innerSubscriber","SimpleInnerSubscriber","innerSubscribe","_unsubscribe","notifyComplete","undefined","notifyNext","_i","scheduler","isScheduler","observables","isArray","CombineLatestOperator","CombineLatestSubscriber","_next","values","push","NONE","_complete","len","active","toRespond","i","observable","oldVal","innerValue","err","OuterSubscriber","notifyError","InnerSubscriber","parent","outerValue","outerIndex","value","Observable","concurrent","concatAll","initialState","currentPageBoxMovie","currentPageUpdatedMovie","updatedMovie","boxMovie","lastPageUpdatedMovie","lastPageBoxMovie","subNavToggle","triggerFetch","behaviorSubject","BehaviorSubject","state","updatedAnimeStream","subscribe","setState","v","currentState","ans","init","next","updateData","data","updateDataQuick","keys","Object","forEach","key","fetchUpdatedMovie$","timer","pipe","switchMapTo","ajax","url","pluck","retry","catchError","of","fetchBoxMovie$","idCartoonUser","headers","authorization","from","AnimeItem","anime","lazy","virtual","isAllowDelete","styleAnimeItem","searchBy","type","animeItemRef","useRef","useCookies","cookies","ref","style","className","onMouseDown","mouseDownAnimeItem","onMouseLeave","mouseLeaveAnimeItem","onMouseMove","mouseMoveAnimeItem","title","name","onClick","a","navBarStore","updateIsShowBlockPopUp","fetch","malId","method","to","replace","mal_id","toLocaleLowerCase","airing_start","Date","getTime","now","toUTCString","slice","getMonth","getDate","getFullYear","aired","prop","day","month","year","recommendation_count","parseFloat","score","favorites","draggable","objectFit","position","top","left","effect","src","imageUrl","images","webp","large_image_url","jpg","image_url","alt","margin","genres","limitAdultGenre","color","explicit_genres","x","current","transition","transform","zIndex","setTimeout","e","xVal","yVal","isScrolling","upcomingAnimeListStream","getBoundingClientRect","axisX","pageX","movementX","offsetWidth","parentElement","includes","pageY","offsetTop","width","clientWidth","height","clientHeight","string","innerObservable","combineAll","period","async","subscriber","dispatch","counter","currentSeason","numSeason","maxPage","dataDetail","dataDetailOriginal","modeFilter","genreId","currentPage","numberOfProduct","season","textSearch","screenWidth","currentPageOnDestroy","currentYearOnDestroy","currentSeasonOnDestroy","isFetching","triggerScroll","isSmoothScroll","isInit","animeListSeasonStream","window","innerWidth","increaseCurrentPage","decreaseCurrentPage","updateSeasonYear","changeCurrentPage$","fromEvent","document","filter","target","tagName","map","keyCode","shouldScrollToSeeMore","changeSeasonYear$","selectYearElement","selectSeasonElement","selectScoreElement","listenEventYear$","parseInt","listenEventSeason$","listenEventScore$","startWith","fetchAnimeSeason$","page","pagination","last_visible_page","offsetLeft","mouseStartX","modeScrolling","upcomingAnimeList","shouldScrollLeft","scrollAnimeUser$","distance","elementScroll","forward","numberList","deltaDistance","end","length","takeWhile","tap","check","childNodes","Math","abs","console","log","scrollAnimeInterval$","scrollE","interval","throttleTime","asyncScheduler","leading","trailing","upcomingAnimeListUpdated$","array","subscription","initAnimeListSeason","setAnimeListState","unsubscribe","filterAnimeList","animeListSeasonState","filteredData","fetchAnimeListSeason","listenWhenOptionChange","selectSeason","selectYear","selectScore","input","querySelector","trim","subscription4","subscription3","genre"],"mappings":"mLAmFE,SAAWA,EAAAC,EAAmBC,G,MACC,oBAAtBA,EAKR,iIAEF,qC,IAGCC,EAA4E,W,SAAxDA,EAAwDF,GAC3E,eAFH,O,EAKkBG,UAAUC,KAAI,WAAoBC,GACjD,2CACFH,EAN6E,GAatCI,WAA2BC,G,SAIjED,EAEEE,EAAMR,GADY,aAAwD,KAAAQ,IAAA,KAE3E,OANOC,UAAUT,E,UAMjB,EAPqC,OAItCU,MAAYH,G,EAMqB,4BAC/B,IAAMI,EACFC,e,IAEHD,oBAAC,MACAE,GAED,YADC,iBAAOA,SAGV,mB,EAGO,UAAoBC,UAAK,SAAkBH,GACjD,IAAII,EAAmB,uBACrBA,GACDA,gBAED,IAAMC,EAAkB,IAACC,IAA4B,MACrD,EAAgB,iBAChBT,EAAK,IAAAQ,GAIL,KAAID,kBAAKG,YAAsB,EAAiBF,GAC9C,yBAAqBA,GACtBR,+B,EAIM,+BACP,IAAIO,EAAkB,KAAIA,kBACxB,IAAMA,EAAY,QACnBR,iCAEF,oB,EAGM,UAAoBY,aAAU,WACpC,+B,EAGM,UAAoBC,eAAU,WACnC,KAAIL,uBAAgBM,EAClB,gBACDd,kC,EAIiBJ,UAAOmB,WAAY,YACtC,0BA3DqC,EAAAhB,CAAA,M,gLCsHxC,EAAM,GACJ,a,UAAA,0BAAgFiB,I,kBAGhF,IAAItB,OAAqC,EAErCuB,OAAYH,EAejB,OAdGI,YAAYC,EAAYA,EAAuB,aAChDF,WAGoE,oBAAnE,EAAiB,EAAY,OAAsC,KACpEvB,WAKe,IAAdyB,EAAW,QAAwBC,YAAC,QACrCD,QAGF,gC,IAGCE,EAAoB,W,SAAAA,KACnB,sBAFH,O,EAKkB,UAAcxB,gBAAwBC,GACrD,kDACFuB,EANqB,GAa6BC,WAAqBtB,G,SAMtEsB,EACErB,EAAkBP,GAD4B,sBAA6C,KAE5F,OAPOQ,iBAAmBR,EACnBQ,SAAgB,EAChBA,Y,iBAKP,EARgD,OAMjDC,MAAYH,G,EAKO,UAAMuB,kBACvB,KAAKC,OAAAC,KAAYC,GAClB,0B,EAGqB,UAAKC,UAAY,WACrC,IAAMR,EAAM,KAAYA,YACpBS,EAAG,EAAQ,O,GACR,IAALA,EACD,gCACC,CACA,KAAKC,OAASD,EACd,KAAKE,UAAYF,E,IACf,IAAMG,MAAUH,EAAGG,KACnB,IAAIC,EAAK,EAAkB,GAC5B,0C,EAKiBpC,UAAUiB,2BACX,KAAjB,KAAKgB,QAAW,IACjB,6B,EAKmB,UAAOd,2BAC3B,IAAMS,EAAS,YACTS,EAAST,EAAI,GACjBM,EAAG,eAECG,IAAWP,IAAI,KAAUI,UAAC,eAD5B,EAGJN,EAAI,GAAiBU,EACV,IAATJ,IACE,KAAKpC,eACN,2BAEA,mC,EAKa,yCAChB,IAAIU,E,IAEHA,oCAAC,MACA+B,GAED,YADC,iBAAO7B,MAAA6B,GAGV,0BA/DgD,EAAAb,CAAA,M,8EC9PRc,WAAapC,G,aAcvD,+CAd0C,OAA3CG,S,EAIS,UAAiBY,WAAY,oBACnC,0B,EAGM,UAAiBsB,YAAQ,cAC/B,2B,EAGM,UAAYxB,eAAW,YAC7B,6BAbwC,EAAAuB,C,KAAA,I,8ECAAE,WAAatC,G,SAGtDsC,EACEC,EAAOC,EACRC,GAFmB,MAAMzC,EAAN,KAA6B,YAEhD,OAFyDE,WAAsBA,eAFxEA,aAAUuC,E,UAIjB,EALwC,OAGzCtC,MAA0DH,G,EAK5CJ,UAAU2B,MAAM,SAAYmB,GACzC,6E,EAGa9C,iBAAmB,SAAMU,GACrC,KAAKiC,OAAAF,YAAc/B,EAAA,MACpB,oB,EAGaV,oBAAqB,WACjC,KAAK2C,OAAA1B,eAAc,MACpB,oBAnBwC,EAAAyB,C,KAAA,G,gBCmBzC,iBAAqCG,EAAgBhC,GAKrD,QAHoB,IAAhBA,IACFA,EAAiB,eAEfA,EAAM,OAGV,oBAAmBkC,IACpB,e,qDCnCD,uDA8D4B,c,YACV,IAAhB,IACDC,4B,sDC9DD,uDA6I0D,a,UAAA,0BAAwC5B,I,kBAEjG,4C,iCCjJD,+CAiEE,SAAO6B,IACR,wB,2OClEKC,EAAe,CACnBC,oBAAqB,EACrBC,wBAAyB,EACzBC,aAAc,GACdC,SAAU,GACVC,qBAAsB,EACtBC,iBAAkB,EAClBC,aAAc,KACdC,cAAa,GAETC,EAAkB,IAAIC,IAAgBV,GAExCW,EAAQX,ECFCY,EDIa,CACxBZ,eACAa,UAAW,SAACC,GAAD,OAAcL,EAAgBI,WAAU,SAACE,GAAD,OAAOD,EAASC,OACnEC,aAAc,WACZ,IAAIC,EAIJ,OAHAR,EAAgBI,WAAU,SAACE,GACzBE,EAAMF,KAEDE,GAAOjB,GAEhBkB,KAAM,WACJT,EAAgBU,KAAKR,IAEvBS,WAAY,WAA0B,IAAzBC,EAAwB,uDAAjBrB,EAClBW,EAAK,2BACAA,GACAU,GAELZ,EAAgBU,KAAKR,IAEvBW,gBAAiB,WAA0B,IAAzBD,EAAwB,uDAAjBrB,EACjBuB,EAAOC,OAAOD,KAAKF,GACzBE,EAAKE,SAAQ,SAACC,GACZf,EAAMe,GAAOL,EAAKK,QCzBXC,EAAqB,WAChC,OAAOC,YAAM,GAAGC,KACdC,YACEC,YAAK,CACHC,IACE,2BACApB,EAAmBI,eAAed,0BACnC2B,KACDI,YAAM,WAAY,WAClBC,YAAM,IACNC,aAAW,kBAAMC,YAAG,WAMfC,EAAiB,SAACC,GAC7B,OAAOV,YAAM,GAAGC,KACdnF,aAAU,kBACRqF,YAAK,CACHC,IACE,wBACApB,EAAmBI,eAAef,oBACpCsC,QAAS,CACPC,cAAc,UAAD,OAAYF,MAE1BT,KACDI,YAAM,WAAY,WAClBC,YAAM,IACNC,aAAW,SAAC9C,GAAD,OAASoD,YAAK,c,0KCiLlBC,UA7MG,SAAC,GAQZ,IAPLC,EAOI,EAPJA,MAOI,IANJC,YAMI,aALJC,eAKI,SAJJC,EAII,EAJJA,cAII,IAHJC,sBAGI,MAHa,GAGb,EAFJC,EAEI,EAFJA,SACAC,EACI,EADJA,KAEMC,EAAeC,mBACrB,EAAkBC,YAAW,CAAC,kBAAvBC,EAAP,oBACA,OACE,yBACEC,IAAKJ,EACLK,MAAOR,EACPS,UAAU,aACVC,YAAaC,EAAmBR,GAChCS,aAAcC,EAAoBV,GAClCW,YAAaC,EAAmBZ,EAAcL,GAC9CkB,MAAOpB,EAAMoB,OAASpB,EAAMqB,MAE5B,yBAAKR,UAAU,yBACdV,GACC,yBAAKU,UAAU,wCACb,uBACEA,UAAU,eACVS,QAAO,sBAAE,sBAAAC,EAAA,sEAELC,IAAYC,wBAAuB,GAF9B,SAGCC,MAAM,mBAAD,OAAoB1B,EAAM2B,OAAS,CAC5CC,OAAQ,SACRhC,QAAS,CACPC,cAAc,UAAD,OAAYa,EAAQf,kBANhC,OASL1B,IAAmBQ,WAAW,CAC5BZ,cAAeI,IAAmBI,eAAeR,eAV9C,0GAiBf,kBAAC,IAAD,CACEgE,GAAE,WACS,UAATvB,EACiB,UAAbD,EAAA,UAEiB,WAAbA,EAAwB,SAAWA,EAASyB,QAAQ,IAAK,KAE3D,QACF,QAPJ,YAQE9B,EAAM2B,OAAS3B,EAAM+B,OARvB,YASA/B,EAAMoB,MACFpB,EAAMoB,MAAMU,QAAQ,kBAAmB,KAAKE,oBAC5ChC,EAAMqB,KAAKS,QAAQ,kBAAmB,KAAKE,sBAGhDhC,EAAMiC,cACL,IAAIC,KAAKlC,EAAMiC,cAAcE,WAC3B,IAAID,KAAKA,KAAKE,OAAOD,WACrB,yBACEf,MAAO,IAAIc,KAAKlC,EAAMiC,cAAcI,cAAcC,MAAM,EAAG,IAC3DzB,UAAU,2DAET,IAAIqB,KAAKlC,EAAMiC,cAAcM,WAAa,EAJ7C,IAKG,IAAIL,KAAKlC,EAAMiC,cAAcO,UALhC,IAMG,IAAIN,KAAKlC,EAAMiC,cAAcQ,eAGnCzC,EAAMiC,cACL,IAAIC,KAAKlC,EAAMiC,cAAcE,UAC3B,IAAID,KAAKA,KAAKE,OAAOD,WACrB,yBACEf,MAAO,IAAIc,KAAKlC,EAAMiC,cAAcI,cAAcC,MAAM,EAAG,IAC3DzB,UAAU,2DAETb,EAAMiC,cACL,6BACG,IAAIC,KAAKlC,EAAMiC,cAAcM,WAAa,EAD7C,IAEG,IAAIL,KAAKlC,EAAMiC,cAAcO,UAFhC,IAGG,IAAIN,KAAKlC,EAAMiC,cAAcQ,gBAKvCzC,EAAMiC,cACL,IAAIC,KAAKlC,EAAMiC,cAAcE,WAC3B,IAAID,KAAKA,KAAKE,OAAOD,WACrB,yBACEf,MAAO,IAAIc,KAAKlC,EAAMiC,cAAcI,cAAcC,MAAM,EAAG,IAC3DzB,UAAU,2DAET,IAAIqB,KAAKlC,EAAMiC,cAAcM,WAAa,EAJ7C,IAKG,IAAIL,KAAKlC,EAAMiC,cAAcO,UALhC,IAMG,IAAIN,KAAKlC,EAAMiC,cAAcQ,eAGnCzC,EAAM0C,OAAS1C,EAAM0C,MAAMC,KAAK7C,KAAK8C,MAAQ5C,EAAM0C,MAAMC,KAAKd,GAAGe,KAChE,yBACExB,MACE,qBAAuB,IAAIc,KAAKlC,EAAM0C,MAAM5C,MAAMuC,cAEpDxB,UAAU,2DAETb,EAAM0C,MAAMC,KAAK7C,KAAK+C,MACtB7C,EAAM0C,MAAMC,KAAK7C,KAAK+C,OAAS,IAC/B7C,EAAM0C,MAAMC,KAAK7C,KAAK8C,IACtB5C,EAAM0C,MAAMC,KAAK7C,KAAK8C,KAAO,IAC7B5C,EAAM0C,MAAMC,KAAK7C,KAAKgD,MAG1B9C,EAAM0C,OAAS1C,EAAM0C,MAAMC,KAAKd,GAAGe,KAClC,yBACExB,MACE,sBAAwB,IAAIc,KAAKlC,EAAM0C,MAAMb,IAAIQ,cAEnDxB,UAAU,4DAETb,EAAM0C,MAAMC,KAAKd,GAAGgB,MACpB7C,EAAM0C,MAAMC,KAAKd,GAAGgB,OAAS,IAC7B7C,EAAM0C,MAAMC,KAAKd,GAAGe,IACpB5C,EAAM0C,MAAMC,KAAKd,GAAGe,KAAO,IAC3B5C,EAAM0C,MAAMC,KAAKd,GAAGiB,KAAM,KAI7B9C,EAAM+C,uBACPC,WAAWhD,EAAMiD,SAAUjD,EAAMkD,UAO9B,KANF,yBACE9B,MAAOpB,EAAMiD,MAAN,UAAiBjD,EAAMiD,MAAvB,cAA2C,YAClDpC,UAAU,0DAETmC,WAAWhD,EAAMiD,OAAjB,UAA6BjD,EAAMiD,MAAnC,OAAgDjD,EAAMkD,WAG1DlD,EAAM+C,sBACL,yBACE3B,MAAK,UAAKpB,EAAM+C,qBAAX,qBACLlC,UAAU,0DAETb,EAAM+C,uBAGD,IAAT9C,GACC,kBAAC,gBAAD,CACEkD,WAAW,EACXvC,MAAO,CACLwC,UAAW,UACXC,SAAU,WACVC,IAAK,EACLC,KAAM,GAERC,OAAO,UACPC,IACEzD,EAAM0D,UACL1D,EAAM2D,OAAOC,MAAQ5D,EAAM2D,OAAOC,KAAKC,iBACvC7D,EAAM2D,OAAOG,KAAO9D,EAAM2D,OAAOG,IAAID,iBACrC7D,EAAM2D,OAAOC,MAAQ5D,EAAM2D,OAAOC,KAAKG,WACvC/D,EAAM2D,OAAOG,KAAO9D,EAAM2D,OAAOG,IAAIC,WACtC/D,EAAM+D,UAERC,IAAKhE,EAAMoB,OAASpB,EAAMqB,QAGpB,IAATpB,GACC,yBACEkD,WAAW,EACXvC,MAAO,CACLwC,UAAW,UACXC,SAAU,WACVC,IAAK,EACLC,KAAM,GAERE,IACEzD,EAAM0D,UACL1D,EAAM2D,OAAOC,MAAQ5D,EAAM2D,OAAOC,KAAKC,iBACvC7D,EAAM2D,OAAOG,KAAO9D,EAAM2D,OAAOG,IAAID,iBACrC7D,EAAM2D,OAAOC,MAAQ5D,EAAM2D,OAAOC,KAAKG,WACvC/D,EAAM2D,OAAOG,KAAO9D,EAAM2D,OAAOG,IAAIC,WACtC/D,EAAM+D,UAERC,IAAKhE,EAAMoB,OAASpB,EAAMqB,OAG9B,yBAAKR,UAAU,mBACb,wBAAID,MAAO,CAAEqD,OAAQ,OAAS7C,MAAOpB,EAAMoB,OACxCpB,EAAMoB,OAASpB,EAAMqB,MAEvBrB,EAAMkE,SAAWC,YAAgBnE,EAAMkE,SACtC,wBAAI9C,MAAK,cAAiBR,MAAO,CAAEwD,MAAO,MAAOH,OAAQ,MAAzD,OAIDjE,EAAMqE,kBAAoBF,YAAgBnE,EAAMqE,kBAC/C,wBAAIjD,MAAK,cAAiBR,MAAO,CAAEwD,MAAO,MAAOH,OAAQ,MAAzD,WAWZ,IAAIK,EAAI,EACR,SAASrD,EAAoBV,GAC3B,OAAO,WACL+D,EAAI,EACJ/D,EAAagE,QAAQ3D,MAAM4D,WAAa,OACxCjE,EAAagE,QAAQ3D,MAAM6D,UACzB,oDACFlE,EAAagE,QAAQ3D,MAAM8D,OAAS,EACpCC,YAAW,WACLpE,EAAagE,UAAShE,EAAagE,QAAQ3D,MAAM4D,WAAa,QACjE,MAIP,SAASzD,EAAmBR,GAC1B,OAAO,WACLA,EAAagE,QAAQ3D,MAAM4D,WAAa,OACxCjE,EAAagE,QAAQ3D,MAAM6D,UAAY,YAI3C,SAAStD,EAAmBZ,EAAcL,GACxC,OAAO,SAAC0E,GACN,IAAIC,EACAC,EACIC,EAAgBC,IAAwB3G,eAAxC0G,YAER,GADAxE,EAAagE,QAAQ3D,MAAM4D,WAAa,OACpCO,EAAaxE,EAAagE,QAAQ1D,UAAY,0BAC7C,CACH,GAAuC,wBAAnCN,EAAagE,QAAQ1D,UAEvB,YADAN,EAAagE,QAAQ1D,UAAY,cAGzB,IAANyD,IACFA,EAAI/D,EAAagE,QAAQU,wBAAwBX,GAEnD,IAAMY,EACJN,EAAEO,OACAb,EAAIM,EAAEQ,WAAaR,EAAEO,MACvB5E,EAAagE,QAAQc,YAAc,EACzB,IAARH,EAAiD,IAAnC3E,EAAagE,QAAQc,cACrCR,EAAe,IAARK,EAAc3E,EAAagE,QAAQc,YAAc,GAMxDP,EAJAvE,EAAagE,QAAQe,cAAczE,UAAU0E,SAC3C,qBAIAX,EAAEY,MACFjF,EAAagE,QAAQe,cAAcA,cAAcG,UACjDlF,EAAagE,QAAQc,YAAc,EAC5BnF,EAEP0E,EAAEY,OACDjF,EAAagE,QAAQe,cAAcA,cAAcG,UAChDlF,EAAagE,QAAQe,cAAcG,WAEhCb,EAAEY,MAAQjF,EAAagE,QAAQkB,UAExC,IAAMC,EAAQnF,EAAagE,QAAQoB,YAC7BC,EAASrF,EAAagE,QAAQsB,aAO9BC,EACJ,0CAJwBhB,EAAOc,EAAS,GAAKA,GAA5B,GAMjB,iBATuBf,EAAOa,EAAQ,GAAKA,EAA3B,GAWhB,OAGFnF,EAAagE,QAAQ3D,MAAM6D,UAAYqB,EACvCvF,EAAagE,QAAQ3D,MAAM8D,OAAS,O,iCCvS1C,+CAsDE,SAAOvF,EAAiB4G,EAAU9L,GACnC,qF,iCCxDD,+CAuDE,SAAO+L,EAAsBhM,GAC9B,gD,iCCxDD,+DAsDyB,gBAkBzB,YAjByB,QACnBiM,EAAC,QAEJzK,QAEGA,EAAU0K,OAEb,uBAEDD,EAAW,GAIT,GAAkB,oBAAAzK,aACjBA,OAGI,SAAmE,YAE1E,OADQ2K,iBAAYC,EAAAH,EAAA,CAAOE,WAAE,EAAiBE,UAAAJ,YACnCE,K,sSCxETG,E,mIACAC,GAFQ,IAAIrE,KAAKA,KAAKE,OAAOG,WAAa,GAEtB,EACpBgE,GAAa,IAAGD,EAAgB,UAChC,EAAIC,GAAaA,GAAa,IAAGD,EAAgB,UACjD,EAAIC,GAAaA,GAAa,IAAGD,EAAgB,UACjD,EAAIC,IAAWD,EAAgB,QAEnC,IAAMjJ,EAAe,CACnBmJ,QAAS,EACTC,WAAY,GACZC,mBAAoB,GACpBC,WAAY,SACZ1D,MAAO,EACP2D,QAAS,IACTC,YAAa,EACbC,gBAAiB,GACjBC,OAAQT,EACRxD,KAAM,IAAIZ,KAAKA,KAAKE,OAAOK,cAC3BuE,WAAY,GACZC,YAAa,KACbC,qBAAsB,KACtBC,qBAAsB,KACtBC,uBAAwB,KACxBC,YAAY,EACZC,eAAe,EACfC,gBAAgB,EAChBC,QAAQ,GAEJ1J,EAAkB,IAAIC,IAAgBV,GAExCW,EAAQX,ECjBCoK,EDmBgB,CAC3BpK,eACAa,UAAW,SAACC,GAAD,OAAcL,EAAgBI,WAAU,SAACE,GAAD,OAAOD,EAASC,OACnEC,aAAc,WACZ,IAAIC,EAIJ,OAHAR,EAAgBI,WAAU,SAACE,GACzBE,EAAMF,KAEDE,GAAOjB,GAEhBkB,KAAM,WACJP,EAAK,2BACAA,GADA,IAEHiJ,YAAaS,OAAOC,aAEtB7J,EAAgBU,KAAKR,IAEvBS,WAAY,WAA0B,IAAzBC,EAAwB,uDAAjBrB,EAClBW,EAAK,2BACAA,GACAU,GAELZ,EAAgBU,KAAKR,IAEvBW,gBAAiB,WAA0B,IAAzBD,EAAwB,uDAAjBrB,EACjBuB,EAAOC,OAAOD,KAAKF,GACzBE,EAAKE,SAAQ,SAACC,GACZf,EAAMe,GAAOL,EAAKK,OAGtB6I,oBAAqB,WACnB5J,EAAK,2BACAA,GADA,IAEH6I,YACE7I,EAAM6I,YAAc,GAAK7I,EAAMwI,QAC3BxI,EAAM6I,YAAc,EACpB7I,EAAM6I,cAEd/I,EAAgBU,KAAKR,IAEvB6J,oBAAqB,WACnB7J,EAAK,2BACAA,GADA,IAEH6I,YACE7I,EAAM6I,YAAc,EAAI,EAAI7I,EAAM6I,YAAc,EAAI7I,EAAM6I,cAE9D/I,EAAgBU,KAAKR,IAEvB8J,iBAAkB,SAACf,EAAQjE,EAAMG,GAC/BjF,EAAK,2BACAA,GADA,IAEH+I,OAAQA,EACRjE,KAAMA,EACNG,UAEFnF,EAAgBU,KAAKR,KCxEZ+J,EAAqB,WAChC,OAAOC,YAAUC,SAAU,WAAW/I,KACpCgJ,aAAO,SAAC9J,GAAD,MAA4B,SAArBA,EAAE+J,OAAOC,WACvB9I,YAAM,WACN+I,aAAI,SAACC,GACH,OAAQA,GACN,KAAK,GAGH,OAFAb,EAAsBG,2BACtBH,EAAsBhJ,WAAW,CAAE8J,uBAAuB,IAE5D,KAAK,GAGH,OAFAd,EAAsBI,2BACtBJ,EAAsBhJ,WAAW,CAAE8J,uBAAuB,IAE5D,QACE,aAMGC,EAAoB,SAC/BC,EACAC,EACAC,GAGA,IAAMC,EAAmBZ,YAAUS,EAAmB,UAAUvJ,KAC9DI,YAAM,SAAU,SAChB+I,aAAI,SAACjK,GAAD,OAAOyK,SAASzK,OAEhB0K,EAAqBd,YAAUU,EAAqB,UAAUxJ,KAClEI,YAAM,SAAU,UAEZyJ,EAAoBf,YAAUW,EAAoB,UAAUzJ,KAChEI,YAAM,SAAU,SAChB+I,aAAI,SAACjK,GAAD,OAAOyK,SAASzK,OAGtB,OAAO0B,YAAK,CACV8I,EAAiB1J,KAAK8J,YAAUvB,EAAsBpJ,eAAeyE,OACrEgG,EAAmB5J,KACjB8J,YAAUvB,EAAsBpJ,eAAe0I,SAEjDgC,EAAkB7J,KAChB8J,YAAUvB,EAAsBpJ,eAAe4E,UAEhD/D,KAAK8G,gBAGGiD,EAAoB,SAC/BnG,EACAiE,EACAmC,GAEA,OAAOjK,YAAM,GAAGC,KACdC,YACEC,YAAK,oCAAD,OACkC0D,EADlC,YAC0CiE,EAD1C,iBACyDmC,IAC3DhK,KACAI,YAAM,YACN+I,aAAI,SAACrI,GAIH,OAHAyH,EAAsB9I,gBAAgB,CACpC6H,QAASxG,EAAMmJ,WAAWC,oBAErBpJ,EAAMtB,QA8Dfa,YAAM,IACNC,aAAW,WACT,OAAOC,YAAG,Y,gTCjJdpC,EAAe,CACnBgM,WAAY,EACZC,YAAa,KACbC,cAAe,WACfC,kBAAmB,GACnBC,kBAAkB,EAClBxC,YAAa,KACblC,aAAa,GAETjH,EAAkB,IAAIC,IAAgBV,GAExCW,EAAQX,ECGC2H,EDDkB,CAC7B3H,eACAa,UAAW,SAACC,GAAD,OAAcL,EAAgBI,WAAU,SAACE,GAAD,OAAOD,EAASC,OACnEC,aAAc,WACZ,IAAIC,EAIJ,OAHAR,EAAgBI,WAAU,SAACE,GACzBE,EAAMF,KAEDE,GAAOjB,GAEhBkB,KAAM,WACJT,EAAgBU,KAAKR,IAEvBS,WAAY,WAA0B,IAAzBC,EAAwB,uDAAjBrB,EAClBW,EAAK,2BACAA,GACAU,GAELZ,EAAgBU,KAAKR,IAEvBW,gBAAiB,WAA0B,IAAzBD,EAAwB,uDAAjBrB,EACjBuB,EAAOC,OAAOD,KAAKF,GACzBE,EAAKE,SAAQ,SAACC,GACZf,EAAMe,GAAOL,EAAKK,QCpBX2K,EAAmB,SAC9BC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAgB,EAChBC,EAAMhF,EAAwB3G,eAAemL,kBAAkBS,OAAS,EAC5E,OAAOhL,YAAM,EAAG,GAAGC,KACjBgL,aAAU,kBAAMH,EAAgBJ,KAChCQ,aAAI,WACFnF,EAAwBrG,gBAAgB,CAAE4K,cAAe,UACzDvE,EAAwBrG,gBAAgB,CAAE8K,kBAAkB,IAC5DM,GAAiB,GACjB,IAAIK,GAAQ,EACNf,EACJrE,EAAwB3G,eAAegL,WACvCU,EAAgBF,EAEhBD,EAAcS,WAAWL,IACzBM,KAAKC,IAAIlB,IAAeO,EAAcS,WAAWL,GAAKX,aAEtDrE,EAAwBrG,gBAAgB,CACtC0K,YAAaO,EAAcS,WAAWL,EAAMF,GAAYT,aAE1DO,EAAchJ,MAAM4D,WAAa,KACjCoF,EAAchJ,MAAM6D,UAApB,qBACEO,EAAwB3G,eAAegL,WADzC,KAGAe,GAAQ,GAGRR,EAAcS,WAAW,IACzBhB,EAAaO,EAAcS,WAAW,GAAGhB,WAAa,IAEtDmB,QAAQC,IAAI,SAIZzF,EAAwBrG,gBAAgB,CACtC0K,YAAaO,EAAcS,WAAWP,GAAYT,aAEpDO,EAAchJ,MAAM4D,WAAa,KACjCoF,EAAchJ,MAAM6D,UAApB,qBACEO,EAAwB3G,eAAegL,WADzC,KAGAe,GAAQ,GAENA,IACFR,EAAchJ,MAAM6D,UAApB,qBACEO,EAAwB3G,eAAegL,WACvCU,EAAgBF,EAFlB,WAKJ3B,aAAO,kBAAM6B,GAAiBJ,KAC9BQ,aAAI,WACFnF,EAAwBrG,gBAAgB,CACtC0K,WACErE,EAAwB3G,eAAegL,WACvCU,EAAgBF,IAEpB7E,EAAwBrG,gBAAgB,CACtC8K,kBAAkB,EAClBF,cAAe,kBAMVmB,EAAuB,SAACC,EAASX,GAC5C,OAAOY,YAAS,IAAI1L,KAClBgJ,aACE,iBAA+D,aAAzDlD,EAAwB3G,eAAekL,iBAE/CY,aAAI,WACF,IAAMd,EACJrE,EAAwB3G,eAAegL,WAAa,IACtDrE,EAAwBrG,gBAAgB,CAAE0K,eAC1CsB,EAAQ/J,MAAM6D,UAAd,qBAAwC4E,EAAxC,UAEFnB,aACE,kBACEyC,EAAQN,WAAWL,IACnBM,KAAKC,IAAIvF,EAAwB3G,eAAegL,aAC9CsB,EAAQN,WAAWL,GAAKX,cAE9BwB,YAAa,IAAMC,IAAgB,CACjCC,SAAS,EACTC,UAAU,MAKHC,EAA4B,WACvC,OAAOhM,YAAM,GAAGC,KACdgJ,aACE,kBACsE,IAApElD,EAAwB3G,eAAemL,kBAAkBS,UAE7DlQ,aAAU,kBACRqF,YAAK,CACHC,IAAI,gFACHH,KACDI,YAAM,WAAY,QAClBC,cACAC,aAAW,kBAAMC,YAAG,c,iCCzH5B,uDAkEgC,a,UAAA,mBAAkC,W,kBAEhE,IAAIjE,EAAY0P,IAAYjB,OAAA,G,OAE1BxO,YAAYD,IACZ0P,QACD,wCAEA,uC,+MC9BCC,E,iBAtCSC,EAAsB,SAACC,GAClC,OAAO,WACL,IAAMF,EAAe1D,IAAsBvJ,UAAUmN,GAKrD,OAJA5D,IAAsBlJ,OAIf,WACLkJ,IAAsBhJ,WAAW,CAAE+I,QAAQ,IAC3C2D,EAAaG,iBAKNC,EAAkB,WAEzB,IADJC,EACG,uDADoB/D,IAAsBpJ,eAE7C,OAAO,WACL,IACMoN,EADyBD,EAAvB9E,mBACgCwB,QAAO,YAAgB,IAAbjF,EAAY,EAAZA,MAChD,OACa,OAAVA,GAAiD,IAA/BuI,EAAqBvI,OACxCA,EAAQuI,EAAqBvI,SAGjCwE,IAAsBhJ,WAAW,CAC/BgI,WAAYgF,IAGZhE,IAAsBpJ,eAAemI,QACrCiB,IAAsBpJ,eAAewI,aAErCY,IAAsBhJ,WAAW,CAAEoI,YAAa,MAOzC6E,EAAuB,WAE9B,IADJF,EACG,uDADoB/D,IAAsBpJ,eAE7C,OAAO,WAEHmN,EAAqB3E,cACnBY,IAAsBpJ,eAAe6I,sBACvCsE,EAAqBzE,SACnBU,IAAsBpJ,eAAe+I,wBACvCoE,EAAqB1I,OACnB2E,IAAsBpJ,eAAe8I,uBAEvCM,IAAsBhJ,WAAW,CAAE4I,YAAY,IAC/C8D,GAAgBA,EAAaG,cAC7BH,EAAelC,YACbuC,EAAqB1I,KACrB0I,EAAqBzE,OACrByE,EAAqB3E,aACrB3I,WAAU,SAACE,GACNqJ,IAAsBpJ,eAAemJ,QACxCC,IAAsBhJ,WAAW,CAC/B6I,eAAgBG,IAAsBpJ,eAAeiJ,cACrDE,QAAQ,IAGZ,IAAMiE,EAAerN,EAAE8J,QAAO,YAAgB,IAAbjF,EAAY,EAAZA,MAC/B,OACa,OAAVA,GAAiD,IAA/BuI,EAAqBvI,OACxCA,EAAQuI,EAAqBvI,SAI/BuI,EAAqBzE,SACnBU,IAAsBpJ,eAAe+I,wBACvCoE,EAAqB1I,OACnB2E,IAAsBpJ,eAAe8I,sBAEvCM,IAAsBhJ,WAAW,CAC/BoI,YAAa,IAGjBY,IAAsBhJ,WAAW,CAC/BgI,WAAYgF,EACZ/E,mBAAoBtI,EACpBiJ,YAAY,EACZE,gBAAgB,IAElBE,IAAsB9I,gBAAgB,CAAE6I,QAAQ,IAE9CC,IAAsBpJ,eAAemI,QACrCiB,IAAsBpJ,eAAewI,aAErCY,IAAsBhJ,WAAW,CAAEoI,YAAa,IAElDY,IAAsB9I,gBAAgB,CACpCuI,qBACEO,IAAsBpJ,eAAewI,YACvCO,uBAAwBK,IAAsBpJ,eAAe0I,OAC7DI,qBAAsBM,IAAsBpJ,eAAeyE,aAQxD6I,EAAyB,SACpCH,EACAI,EACAC,EACAC,GAEA,OAAO,WACDF,EAAarH,SAAWsH,EAAWtH,UACrCqH,EAAarH,QAAQtH,MAAQuO,EAAqBzE,OAClD8E,EAAWtH,QAAQtH,MAAQuO,EAAqB1I,MAElD,IAAMiJ,EAAQ9D,SAAS+D,cAAc,oCACjCD,GAAgC,KAAvBA,EAAM9O,MAAMgP,SACvBF,EAAM9O,MAAQuO,EAAqBxE,YAErC,IACIkF,EADEC,EAAgBpE,cAAqB7J,YAgB3C,OAdI2N,EAAWtH,SAAWqH,EAAarH,SAAWuH,EAAYvH,UAC5D2H,EAAgB1D,YACdqD,EAAWtH,QACXqH,EAAarH,QACbuH,EAAYvH,SACZrG,WAAU,YAA4B,IAAD,mBAAzB4E,EAAyB,KAAnBiE,EAAmB,KAAX9D,EAAW,KAChCwE,IAAsBpJ,eAAemJ,QACxCC,IAAsBhJ,WAAW,CAC/B6I,eAAgBG,IAAsBpJ,eAAeiJ,cACrDC,gBAAgB,EAChBC,QAAQ,IAEZC,IAAsBK,iBAAiBf,EAAQjE,EAAMG,OAElD,WACLiJ,GAAiBA,EAAcZ,cAC/Ba,EAAcb,iBAmBb,SAASnH,EAAgBD,GAC9B,IAAIkG,GAAQ,EAMZ,OALAlG,EAAOpF,SAAQ,SAACsN,GACK,WAAfA,EAAM/K,OACR+I,GAAQ,MAGLA,I","file":"static/js/14.aaceecb6.chunk.js","sourcesContent":[null,null,null,null,null,null,null,null,"import { BehaviorSubject } from \"rxjs\";\r\nconst initialState = {\r\n  currentPageBoxMovie: 1,\r\n  currentPageUpdatedMovie: 1,\r\n  updatedMovie: [],\r\n  boxMovie: [],\r\n  lastPageUpdatedMovie: 1,\r\n  lastPageBoxMovie: 1,\r\n  subNavToggle: null,\r\n  triggerFetch:false\r\n};\r\nconst behaviorSubject = new BehaviorSubject(initialState);\r\n\r\nlet state = initialState;\r\n\r\nconst updatedAnimeStore = {\r\n  initialState,\r\n  subscribe: (setState) => behaviorSubject.subscribe((v) => setState(v)),\r\n  currentState: () => {\r\n    let ans;\r\n    behaviorSubject.subscribe((v) => {\r\n      ans = v;\r\n    });\r\n    return ans || initialState;\r\n  },\r\n  init: () => {\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateData: (data = initialState) => {\r\n    state = {\r\n      ...state,\r\n      ...data,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateDataQuick: (data = initialState) => {\r\n    const keys = Object.keys(data);\r\n    keys.forEach((key) => {\r\n      state[key] = data[key];\r\n    });\r\n  },\r\n};\r\n\r\nexport default updatedAnimeStore;\r\n","import { from, of, timer } from \"rxjs\";\r\nimport { ajax } from \"rxjs/ajax\";\r\nimport {\r\n  catchError,\r\n  pluck,\r\n  retry,\r\n  switchMap,\r\n  switchMapTo,\r\n} from \"rxjs/operators\";\r\nimport updatedAnimeStore from \"../store/updatedAnime\";\r\n\r\nexport const updatedAnimeStream = updatedAnimeStore;\r\n\r\nexport const fetchUpdatedMovie$ = () => {\r\n  return timer(0).pipe(\r\n    switchMapTo(\r\n      ajax({\r\n        url:\r\n          \"/api/movies/latest?page=\" +\r\n          updatedAnimeStream.currentState().currentPageUpdatedMovie,\r\n      }).pipe(\r\n        pluck(\"response\", \"message\"),\r\n        retry(20),\r\n        catchError(() => of([]))\r\n      )\r\n    )\r\n  );\r\n};\r\n\r\nexport const fetchBoxMovie$ = (idCartoonUser) => {\r\n  return timer(0).pipe(\r\n    switchMap(() =>\r\n      ajax({\r\n        url:\r\n          \"/api/movies/box?page=\" +\r\n          updatedAnimeStream.currentState().currentPageBoxMovie,\r\n        headers: {\r\n          authorization: `Bearer ${idCartoonUser}`,\r\n        },\r\n      }).pipe(\r\n        pluck(\"response\", \"message\"),\r\n        retry(20),\r\n        catchError((err) => from([]))\r\n      )\r\n    )\r\n  );\r\n};\r\n","import \"./AnimeItem.css\";\r\nimport \"react-lazy-load-image-component/src/effects/opacity.css\";\r\n\r\nimport React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { upcomingAnimeListStream } from \"../../epics/upcomingAnimeList\";\r\nimport { updatedAnimeStream } from \"../../epics/updatedAnime\";\r\nimport { limitAdultGenre } from \"../../Functions/animeListSeason\";\r\nimport navBarStore from \"../../store/navbar\";\r\n\r\nconst AnimeItem = ({\r\n  anime,\r\n  lazy = false,\r\n  virtual = false,\r\n  isAllowDelete,\r\n  styleAnimeItem = {},\r\n  searchBy,\r\n  type,\r\n}) => {\r\n  const animeItemRef = useRef();\r\n  const [cookies] = useCookies([\"idCartoonUser\"]);\r\n  return (\r\n    <div\r\n      ref={animeItemRef}\r\n      style={styleAnimeItem}\r\n      className=\"anime-item\"\r\n      onMouseDown={mouseDownAnimeItem(animeItemRef)}\r\n      onMouseLeave={mouseLeaveAnimeItem(animeItemRef)}\r\n      onMouseMove={mouseMoveAnimeItem(animeItemRef, virtual)}\r\n      title={anime.title || anime.name}\r\n    >\r\n      <div className=\"layer-upcoming-anime\"></div>\r\n      {isAllowDelete && (\r\n        <div className=\"anime-delete-button top-left_summary\">\r\n          <i\r\n            className=\"fas fa-times\"\r\n            onClick={async () => {\r\n              try {\r\n                navBarStore.updateIsShowBlockPopUp(true);\r\n                await fetch(`/api/movies/box/${anime.malId}`, {\r\n                  method: \"DELETE\",\r\n                  headers: {\r\n                    authorization: `Bearer ${cookies.idCartoonUser}`,\r\n                  },\r\n                });\r\n                updatedAnimeStream.updateData({\r\n                  triggerFetch: !updatedAnimeStream.currentState().triggerFetch,\r\n                });\r\n              } catch (error) {}\r\n            }}\r\n          ></i>\r\n        </div>\r\n      )}\r\n      <Link\r\n        to={`/${\r\n          type !== \"manga\"\r\n            ? searchBy !== \"anime\"\r\n              ? `${\r\n                  searchBy === \"people\" ? \"person\" : searchBy.replace(\"s\", \"\")\r\n                }`\r\n              : \"anime\"\r\n            : \"manga\"\r\n        }/${anime.malId || anime.mal_id}-${\r\n          anime.title\r\n            ? anime.title.replace(/[ /%^&*():.$,]/g, \"-\").toLocaleLowerCase()\r\n            : anime.name.replace(/[ /%^&*():.$,]/g, \"-\").toLocaleLowerCase()\r\n        }`}\r\n      >\r\n        {anime.airing_start &&\r\n          new Date(anime.airing_start).getTime() <=\r\n            new Date(Date.now()).getTime() && (\r\n            <div\r\n              title={new Date(anime.airing_start).toUTCString().slice(4, 17)}\r\n              className=\"anime-info-display_summary top-left_summary color-green\"\r\n            >\r\n              {new Date(anime.airing_start).getMonth() + 1}-\r\n              {new Date(anime.airing_start).getDate()}-\r\n              {new Date(anime.airing_start).getFullYear()}\r\n            </div>\r\n          )}\r\n        {anime.airing_start &&\r\n          new Date(anime.airing_start).getTime() >\r\n            new Date(Date.now()).getTime() && (\r\n            <div\r\n              title={new Date(anime.airing_start).toUTCString().slice(4, 17)}\r\n              className=\"anime-info-display_summary top-left_summary color-green\"\r\n            >\r\n              {anime.airing_start && (\r\n                <div>\r\n                  {new Date(anime.airing_start).getMonth() + 1}-\r\n                  {new Date(anime.airing_start).getDate()}-\r\n                  {new Date(anime.airing_start).getFullYear()}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        {anime.airing_start &&\r\n          new Date(anime.airing_start).getTime() <=\r\n            new Date(Date.now()).getTime() && (\r\n            <div\r\n              title={new Date(anime.airing_start).toUTCString().slice(4, 17)}\r\n              className=\"anime-info-display_summary top-left_summary color-green\"\r\n            >\r\n              {new Date(anime.airing_start).getMonth() + 1}-\r\n              {new Date(anime.airing_start).getDate()}-\r\n              {new Date(anime.airing_start).getFullYear()}\r\n            </div>\r\n          )}\r\n        {anime.aired && anime.aired.prop.from.day && !anime.aired.prop.to.day && (\r\n          <div\r\n            title={\r\n              \"Started airing on \" + new Date(anime.aired.from).toUTCString()\r\n            }\r\n            className=\"anime-info-display_summary top-left_summary color-green\"\r\n          >\r\n            {anime.aired.prop.from.month}\r\n            {anime.aired.prop.from.month && \"/\"}\r\n            {anime.aired.prop.from.day}\r\n            {anime.aired.prop.from.day && \"/\"}\r\n            {anime.aired.prop.from.year}\r\n          </div>\r\n        )}\r\n        {anime.aired && anime.aired.prop.to.day && (\r\n          <div\r\n            title={\r\n              \"Finished airing on \" + new Date(anime.aired.to).toUTCString()\r\n            }\r\n            className=\"anime-info-display_summary top-left_summary color-yellow\"\r\n          >\r\n            {anime.aired.prop.to.month}\r\n            {anime.aired.prop.to.month && \"/\"}\r\n            {anime.aired.prop.to.day}\r\n            {anime.aired.prop.to.day && \"/\"}\r\n            {anime.aired.prop.to.year}{\" \"}\r\n          </div>\r\n        )}\r\n\r\n        {!anime.recommendation_count &&\r\n        (parseFloat(anime.score) || anime.favorites) ? (\r\n          <div\r\n            title={anime.score ? `${anime.score} out of 10` : \"Favorites\"}\r\n            className=\"anime-info-display_summary top-right_summary color-red\"\r\n          >\r\n            {parseFloat(anime.score) ? `${anime.score}/10` : anime.favorites}\r\n          </div>\r\n        ) : null}\r\n        {anime.recommendation_count && (\r\n          <div\r\n            title={`${anime.recommendation_count} people recommend`}\r\n            className=\"anime-info-display_summary top-right_summary color-red\"\r\n          >\r\n            {anime.recommendation_count}\r\n          </div>\r\n        )}\r\n        {lazy === true && (\r\n          <LazyLoadImage\r\n            draggable={false}\r\n            style={{\r\n              objectFit: \"contain\",\r\n              position: \"absolute\",\r\n              top: 0,\r\n              left: 0,\r\n            }}\r\n            effect=\"opacity\"\r\n            src={\r\n              anime.imageUrl ||\r\n              (anime.images.webp && anime.images.webp.large_image_url) ||\r\n              (anime.images.jpg && anime.images.jpg.large_image_url) ||\r\n              (anime.images.webp && anime.images.webp.image_url) ||\r\n              (anime.images.jpg && anime.images.jpg.image_url) ||\r\n              anime.image_url\r\n            }\r\n            alt={anime.title || anime.name}\r\n          />\r\n        )}\r\n        {lazy === false && (\r\n          <img\r\n            draggable={false}\r\n            style={{\r\n              objectFit: \"contain\",\r\n              position: \"absolute\",\r\n              top: 0,\r\n              left: 0,\r\n            }}\r\n            src={\r\n              anime.imageUrl ||\r\n              (anime.images.webp && anime.images.webp.large_image_url) ||\r\n              (anime.images.jpg && anime.images.jpg.large_image_url) ||\r\n              (anime.images.webp && anime.images.webp.image_url) ||\r\n              (anime.images.jpg && anime.images.jpg.image_url) ||\r\n              anime.image_url\r\n            }\r\n            alt={anime.title || anime.name}\r\n          />\r\n        )}\r\n        <div className=\"anime-item-info\">\r\n          <h3 style={{ margin: \"5px\" }} title={anime.title}>\r\n            {anime.title || anime.name}\r\n          </h3>\r\n          {anime.genres && !limitAdultGenre(anime.genres) && (\r\n            <h3 title={`age_limited`} style={{ color: \"red\", margin: \"0\" }}>\r\n              18+\r\n            </h3>\r\n          )}\r\n          {anime.explicit_genres && !limitAdultGenre(anime.explicit_genres) && (\r\n            <h3 title={`age_limited`} style={{ color: \"red\", margin: \"0\" }}>\r\n              18+\r\n            </h3>\r\n          )}\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnimeItem;\r\nlet x = 0;\r\nfunction mouseLeaveAnimeItem(animeItemRef) {\r\n  return () => {\r\n    x = 0;\r\n    animeItemRef.current.style.transition = \"0.1s\";\r\n    animeItemRef.current.style.transform =\r\n      \"perspective(500px) scale(1) rotateX(0) rotateY(0)\";\r\n    animeItemRef.current.style.zIndex = 1;\r\n    setTimeout(() => {\r\n      if (animeItemRef.current) animeItemRef.current.style.transition = \"0s\";\r\n    }, 300);\r\n  };\r\n}\r\n\r\nfunction mouseDownAnimeItem(animeItemRef) {\r\n  return () => {\r\n    animeItemRef.current.style.transition = \"0.3s\";\r\n    animeItemRef.current.style.transform = \"scale(1)\";\r\n  };\r\n}\r\n\r\nfunction mouseMoveAnimeItem(animeItemRef, virtual) {\r\n  return (e) => {\r\n    let xVal;\r\n    let yVal;\r\n    const { isScrolling } = upcomingAnimeListStream.currentState();\r\n    animeItemRef.current.style.transition = \"0.3s\";\r\n    if (isScrolling) animeItemRef.current.className = \"anime-item relative\";\r\n    else {\r\n      if (animeItemRef.current.className === \"anime-item relative\") {\r\n        animeItemRef.current.className = \"anime-item\";\r\n        return;\r\n      }\r\n      if (x === 0) {\r\n        x = animeItemRef.current.getBoundingClientRect().x;\r\n      }\r\n      const axisX =\r\n        e.pageX -\r\n        ((x + e.movementX) % e.pageX) -\r\n        animeItemRef.current.offsetWidth / 2;\r\n      if (axisX * 1.5 < animeItemRef.current.offsetWidth * 1.5)\r\n        xVal = axisX * 1.5 + animeItemRef.current.offsetWidth / 2;\r\n      if (\r\n        animeItemRef.current.parentElement.className.includes(\r\n          \"list-anime-nowrap\"\r\n        )\r\n      ) {\r\n        yVal =\r\n          e.pageY -\r\n          animeItemRef.current.parentElement.parentElement.offsetTop -\r\n          animeItemRef.current.offsetWidth / 2;\r\n      } else if (virtual) {\r\n        yVal =\r\n          e.pageY -\r\n          (animeItemRef.current.parentElement.parentElement.offsetTop +\r\n            animeItemRef.current.parentElement.offsetTop);\r\n      } else {\r\n        yVal = e.pageY - animeItemRef.current.offsetTop;\r\n      }\r\n      const width = animeItemRef.current.clientWidth;\r\n      const height = animeItemRef.current.clientHeight;\r\n      const yRotation = 20 * ((xVal - width / 2) / width);\r\n\r\n      /* Calculate the rotation along the X-axis */\r\n      const xRotation = -20 * ((yVal - height / 2) / height);\r\n\r\n      /* Generate string for CSS transform property */\r\n      const string =\r\n        \"perspective(500px) scale(1.1) rotateX(\" +\r\n        xRotation +\r\n        \"deg) rotateY(\" +\r\n        yRotation +\r\n        \"deg)\";\r\n\r\n      /* Apply the calculated transformation */\r\n      animeItemRef.current.style.transform = string;\r\n      animeItemRef.current.style.zIndex = 10;\r\n    }\r\n  };\r\n}\r\n",null,null,null,"import { BehaviorSubject } from \"rxjs\";\r\nlet today = new Date(Date.now()).getMonth() + 1;\r\nlet currentSeason;\r\nlet numSeason = today / 3;\r\nif (numSeason <= 1) currentSeason = \"winter\";\r\nif (1 < numSeason && numSeason <= 2) currentSeason = \"spring\";\r\nif (2 < numSeason && numSeason <= 3) currentSeason = \"summer\";\r\nif (3 < numSeason) currentSeason = \"fall\";\r\n\r\nconst initialState = {\r\n  maxPage: 1,\r\n  dataDetail: [],\r\n  dataDetailOriginal: [],\r\n  modeFilter: \"filter\",\r\n  score: 0,\r\n  genreId: \"0\",\r\n  currentPage: 1,\r\n  numberOfProduct: 40,\r\n  season: currentSeason,\r\n  year: new Date(Date.now()).getFullYear(),\r\n  textSearch: \"\",\r\n  screenWidth: null,\r\n  currentPageOnDestroy: null,\r\n  currentYearOnDestroy: null,\r\n  currentSeasonOnDestroy: null,\r\n  isFetching: false,\r\n  triggerScroll: false,\r\n  isSmoothScroll: true,\r\n  isInit: true,\r\n};\r\nconst behaviorSubject = new BehaviorSubject(initialState);\r\n\r\nlet state = initialState;\r\n\r\nconst animeListSeasonStore = {\r\n  initialState,\r\n  subscribe: (setState) => behaviorSubject.subscribe((v) => setState(v)),\r\n  currentState: () => {\r\n    let ans;\r\n    behaviorSubject.subscribe((v) => {\r\n      ans = v;\r\n    });\r\n    return ans || initialState;\r\n  },\r\n  init: () => {\r\n    state = {\r\n      ...state,\r\n      screenWidth: window.innerWidth,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateData: (data = initialState) => {\r\n    state = {\r\n      ...state,\r\n      ...data,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateDataQuick: (data = initialState) => {\r\n    const keys = Object.keys(data);\r\n    keys.forEach((key) => {\r\n      state[key] = data[key];\r\n    });\r\n  },\r\n  increaseCurrentPage: () => {\r\n    state = {\r\n      ...state,\r\n      currentPage:\r\n        state.currentPage + 1 <= state.maxPage\r\n          ? state.currentPage + 1\r\n          : state.currentPage,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  decreaseCurrentPage: () => {\r\n    state = {\r\n      ...state,\r\n      currentPage:\r\n        state.currentPage - 1 > 0 ? state.currentPage - 1 : state.currentPage,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateSeasonYear: (season, year, score) => {\r\n    state = {\r\n      ...state,\r\n      season: season,\r\n      year: year,\r\n      score,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n};\r\n\r\nexport default animeListSeasonStore;\r\n","import { from, fromEvent, of, timer } from \"rxjs\";\r\nimport { ajax } from \"rxjs/ajax\";\r\nimport {\r\n  catchError,\r\n  combineAll,\r\n  filter,\r\n  map,\r\n  pluck,\r\n  retry,\r\n  startWith,\r\n  switchMapTo,\r\n} from \"rxjs/operators\";\r\n\r\nimport animeListSeasonStore from \"../store/animeListSeason\";\r\n\r\nexport const animeListSeasonStream = animeListSeasonStore;\r\n\r\nexport const changeCurrentPage$ = () => {\r\n  return fromEvent(document, \"keydown\").pipe(\r\n    filter((v) => v.target.tagName === \"BODY\"),\r\n    pluck(\"keyCode\"),\r\n    map((keyCode) => {\r\n      switch (keyCode) {\r\n        case 39:\r\n          animeListSeasonStream.increaseCurrentPage();\r\n          animeListSeasonStream.updateData({ shouldScrollToSeeMore: true });\r\n          return;\r\n        case 37:\r\n          animeListSeasonStream.decreaseCurrentPage();\r\n          animeListSeasonStream.updateData({ shouldScrollToSeeMore: true });\r\n          return;\r\n        default:\r\n          return;\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nexport const changeSeasonYear$ = (\r\n  selectYearElement,\r\n  selectSeasonElement,\r\n  selectScoreElement\r\n) => {\r\n  // console.log(\"change\")\r\n  const listenEventYear$ = fromEvent(selectYearElement, \"change\").pipe(\r\n    pluck(\"target\", \"value\"),\r\n    map((v) => parseInt(v))\r\n  );\r\n  const listenEventSeason$ = fromEvent(selectSeasonElement, \"change\").pipe(\r\n    pluck(\"target\", \"value\")\r\n  );\r\n  const listenEventScore$ = fromEvent(selectScoreElement, \"change\").pipe(\r\n    pluck(\"target\", \"value\"),\r\n    map((v) => parseInt(v))\r\n  );\r\n\r\n  return from([\r\n    listenEventYear$.pipe(startWith(animeListSeasonStream.currentState().year)),\r\n    listenEventSeason$.pipe(\r\n      startWith(animeListSeasonStream.currentState().season)\r\n    ),\r\n    listenEventScore$.pipe(\r\n      startWith(animeListSeasonStream.currentState().score)\r\n    ),\r\n  ]).pipe(combineAll());\r\n};\r\n\r\nexport const fetchAnimeSeason$ = (\r\n  year,\r\n  season,\r\n  page\r\n) => {\r\n  return timer(0).pipe(\r\n    switchMapTo(\r\n      ajax(\r\n        `https://api.jikan.moe/v4/seasons/${year}/${season}?page=${page}`\r\n      ).pipe(\r\n        pluck(\"response\"),\r\n        map((anime) => {\r\n          animeListSeasonStream.updateDataQuick({\r\n            maxPage: anime.pagination.last_visible_page,\r\n          });\r\n          return anime.data;\r\n          // // updateOriginalData(anime);\r\n          // console.log(anime);\r\n          // animeListSeasonStream.updateData({\r\n          //   dataDetailOriginal: anime,\r\n          // })\r\n          // anime = anime.filter((movie) => {\r\n          //   if (animeListSeasonStream.currentState().modeFilter === \"all\") {\r\n          //     return (\r\n          //       movie.airing_start &&\r\n          //       (checkAnimeIncludeGenre(\r\n          //         movie.genres,\r\n          //         animeListSeasonStream.currentState().genreId\r\n          //       ) ||\r\n          //         checkAnimeIncludeGenre(\r\n          //           movie.explicit_genres,\r\n          //           animeListSeasonStream.currentState().genreId\r\n          //         )) &&\r\n          //       (movie.score > score || score === 0)\r\n          //     );\r\n          //   }\r\n          //   return (\r\n          //     movie.airing_start &&\r\n          //     limitAdultGenre(movie.explicit_genres) &&\r\n          //     (checkAnimeIncludeGenre(\r\n          //       movie.genres,\r\n          //       animeListSeasonStream.currentState().genreId\r\n          //     ) ||\r\n          //       checkAnimeIncludeGenre(\r\n          //         movie.explicit_genres,\r\n          //         animeListSeasonStream.currentState().genreId\r\n          //       )) &&\r\n          //     (movie.score > score || score === 0)\r\n          //   );\r\n          // });\r\n          // animeListSeasonStream.updateDataQuick({\r\n          //   maxPage: Math.ceil(\r\n          //     anime.length / animeListSeasonStream.initialState.numberOfProduct\r\n          //   ),\r\n          // });\r\n          // let sortedArray = orderBy(anime, [\"airing_start\"], [\"desc\"]);\r\n          // const latestAiringIndex = sortedArray.findIndex(\r\n          //   (anime) =>\r\n          //     new Date(anime.airing_start).getTime() <=\r\n          //     new Date(Date.now()).getTime()\r\n          // );\r\n          // if (\r\n          //   animeListSeasonStream.initialState.year === year &&\r\n          //   animeListSeasonStream.initialState.season === season\r\n          // ) {\r\n          //   page = Math.ceil((latestAiringIndex + 1) / numberOfProducts);\r\n          //   animeListSeasonStream.updateData({ currentPage: page });\r\n          // } else {\r\n          //   animeListSeasonStream.updateData({ currentPage: 1 });\r\n          // }\r\n          // if (page === 0) page = 1;\r\n          // sortedArray = sortedArray.slice(\r\n          //   (page - 1) * numberOfProducts,\r\n          //   page * numberOfProducts\r\n          // );\r\n          // return sortedArray;\r\n        }),\r\n        retry(20),\r\n        catchError(() => {\r\n          return of([]);\r\n        })\r\n      )\r\n    )\r\n  );\r\n};\r\n","import { BehaviorSubject } from \"rxjs\";\r\nconst initialState = {\r\n  offsetLeft: 0,\r\n  mouseStartX: null,\r\n  modeScrolling: \"interval\",\r\n  upcomingAnimeList: [],\r\n  shouldScrollLeft: true,\r\n  screenWidth: null,\r\n  isScrolling: false\r\n};\r\nconst behaviorSubject = new BehaviorSubject(initialState);\r\n\r\nlet state = initialState;\r\n\r\nconst upcomingAnimeListStore = {\r\n  initialState,\r\n  subscribe: (setState) => behaviorSubject.subscribe((v) => setState(v)),\r\n  currentState: () => {\r\n    let ans;\r\n    behaviorSubject.subscribe((v) => {\r\n      ans = v;\r\n    });\r\n    return ans || initialState;\r\n  },\r\n  init: () => {\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateData: (data = initialState) => {\r\n    state = {\r\n      ...state,\r\n      ...data,\r\n    };\r\n    behaviorSubject.next(state);\r\n  },\r\n  updateDataQuick: (data = initialState) => {\r\n    const keys = Object.keys(data);\r\n    keys.forEach((key) => {\r\n      state[key] = data[key];\r\n    });\r\n  },\r\n};\r\n\r\n\r\nexport default upcomingAnimeListStore;\r\n","import { asyncScheduler, interval, of, timer } from \"rxjs\";\r\nimport { ajax } from \"rxjs/ajax\";\r\nimport {\r\n  catchError,\r\n  filter,\r\n  pluck,\r\n  retry,\r\n  switchMap,\r\n  takeWhile,\r\n  tap,\r\n  throttleTime,\r\n} from \"rxjs/operators\";\r\n\r\nimport upcomingAnimeListStore from \"../store/upcomingAnimeList\";\r\n\r\nexport const upcomingAnimeListStream = upcomingAnimeListStore;\r\n\r\nexport const scrollAnimeUser$ = (\r\n  distance,\r\n  elementScroll,\r\n  forward,\r\n  numberList\r\n) => {\r\n  let deltaDistance = 0;\r\n  let end = upcomingAnimeListStream.currentState().upcomingAnimeList.length - 7;\r\n  return timer(0, 2).pipe(\r\n    takeWhile(() => deltaDistance < distance),\r\n    tap(() => {\r\n      upcomingAnimeListStream.updateDataQuick({ modeScrolling: \"enter\" });\r\n      upcomingAnimeListStream.updateDataQuick({ shouldScrollLeft: false });\r\n      deltaDistance += 10;\r\n      let check = true;\r\n      const offsetLeft =\r\n        upcomingAnimeListStream.currentState().offsetLeft -\r\n        deltaDistance * forward;\r\n      if (\r\n        elementScroll.childNodes[end] &&\r\n        Math.abs(offsetLeft) >= elementScroll.childNodes[end].offsetLeft\r\n      ) {\r\n        upcomingAnimeListStream.updateDataQuick({\r\n          offsetLeft: -elementScroll.childNodes[end - numberList].offsetLeft,\r\n        });\r\n        elementScroll.style.transition = \"0s\";\r\n        elementScroll.style.transform = `translateX(${\r\n          upcomingAnimeListStream.currentState().offsetLeft\r\n        })`;\r\n        check = false;\r\n      }\r\n      if (\r\n        elementScroll.childNodes[0] &&\r\n        offsetLeft - elementScroll.childNodes[0].offsetLeft > 0\r\n      ) {\r\n        console.log(\"reset\");\r\n        // stream.updateOffsetLeft(\r\n        //   -elementScroll.childNodes[numberList].offsetLeft\r\n        // );\r\n        upcomingAnimeListStream.updateDataQuick({\r\n          offsetLeft: -elementScroll.childNodes[numberList].offsetLeft,\r\n        });\r\n        elementScroll.style.transition = \"0s\";\r\n        elementScroll.style.transform = `translateX(${\r\n          upcomingAnimeListStream.currentState().offsetLeft\r\n        })`;\r\n        check = false;\r\n      }\r\n      if (check)\r\n        elementScroll.style.transform = `translateX(${\r\n          upcomingAnimeListStream.currentState().offsetLeft -\r\n          deltaDistance * forward\r\n        }px)`;\r\n    }),\r\n    filter(() => deltaDistance >= distance),\r\n    tap(() => {\r\n      upcomingAnimeListStream.updateDataQuick({\r\n        offsetLeft:\r\n          upcomingAnimeListStream.currentState().offsetLeft -\r\n          deltaDistance * forward,\r\n      });\r\n      upcomingAnimeListStream.updateDataQuick({\r\n        shouldScrollLeft: true,\r\n        modeScrolling: \"interval\",\r\n      });\r\n    })\r\n  );\r\n};\r\n\r\nexport const scrollAnimeInterval$ = (scrollE, end) => {\r\n  return interval(20).pipe(\r\n    filter(\r\n      () => upcomingAnimeListStream.currentState().modeScrolling === \"interval\"\r\n    ),\r\n    tap(() => {\r\n      const offsetLeft =\r\n        upcomingAnimeListStream.currentState().offsetLeft - 2.4;\r\n      upcomingAnimeListStream.updateDataQuick({ offsetLeft });\r\n      scrollE.style.transform = `translateX(${offsetLeft}px)`;\r\n    }),\r\n    filter(\r\n      () =>\r\n        scrollE.childNodes[end] &&\r\n        Math.abs(upcomingAnimeListStream.currentState().offsetLeft) >=\r\n          scrollE.childNodes[end].offsetLeft\r\n    ),\r\n    throttleTime(1000, asyncScheduler, {\r\n      leading: true,\r\n      trailing: false,\r\n    })\r\n  );\r\n};\r\n\r\nexport const upcomingAnimeListUpdated$ = () => {\r\n  return timer(0).pipe(\r\n    filter(\r\n      () =>\r\n        upcomingAnimeListStream.currentState().upcomingAnimeList.length === 0\r\n    ),\r\n    switchMap(() =>\r\n      ajax({\r\n        url: `https://api.jikan.moe/v4/anime?status=upcoming&order_by=favorites&sort=desc`,\r\n      }).pipe(\r\n        pluck(\"response\", \"data\"),\r\n        retry(),\r\n        catchError(() => of([]))\r\n      )\r\n    )\r\n  );\r\n};\r\n",null,"import {\r\n  animeListSeasonStream,\r\n  changeCurrentPage$,\r\n  changeSeasonYear$,\r\n  fetchAnimeSeason$,\r\n} from \"../epics/animeListSeason\";\r\n\r\nexport const initAnimeListSeason = (setAnimeListState) => {\r\n  return () => {\r\n    const subscription = animeListSeasonStream.subscribe(setAnimeListState);\r\n    animeListSeasonStream.init();\r\n    // window.scroll({\r\n    //   top: 0,\r\n    // });\r\n    return () => {\r\n      animeListSeasonStream.updateData({ isInit: true });\r\n      subscription.unsubscribe();\r\n    };\r\n  };\r\n};\r\n\r\nexport const filterAnimeList = (\r\n  animeListSeasonState = animeListSeasonStream.currentState()\r\n) => {\r\n  return () => {\r\n    const { dataDetailOriginal } = animeListSeasonState;\r\n    const filteredData = dataDetailOriginal.filter(({ score }) => {\r\n      return (\r\n        (score === null && animeListSeasonState.score === 0) ||\r\n        score > animeListSeasonState.score\r\n      );\r\n    });\r\n    animeListSeasonStream.updateData({\r\n      dataDetail: filteredData,\r\n    });\r\n    if (\r\n      animeListSeasonStream.currentState().maxPage <\r\n      animeListSeasonStream.currentState().currentPage\r\n    ) {\r\n      animeListSeasonStream.updateData({ currentPage: 1 });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  };\r\n};\r\n\r\nlet subscription;\r\nexport const fetchAnimeListSeason = (\r\n  animeListSeasonState = animeListSeasonStream.currentState()\r\n) => {\r\n  return () => {\r\n    if (\r\n      animeListSeasonState.currentPage !==\r\n        animeListSeasonStream.currentState().currentPageOnDestroy ||\r\n      animeListSeasonState.season !==\r\n        animeListSeasonStream.currentState().currentSeasonOnDestroy ||\r\n      animeListSeasonState.year !==\r\n        animeListSeasonStream.currentState().currentYearOnDestroy\r\n    ) {\r\n      animeListSeasonStream.updateData({ isFetching: true });\r\n      subscription && subscription.unsubscribe();\r\n      subscription = fetchAnimeSeason$(\r\n        animeListSeasonState.year,\r\n        animeListSeasonState.season,\r\n        animeListSeasonState.currentPage,\r\n      ).subscribe((v) => {\r\n        if (!animeListSeasonStream.currentState().isInit) {\r\n          animeListSeasonStream.updateData({\r\n            triggerScroll: !animeListSeasonStream.currentState().triggerScroll,\r\n            isInit: false,\r\n          });\r\n        }\r\n        const filteredData = v.filter(({ score }) => {\r\n          return (\r\n            (score === null && animeListSeasonState.score === 0) ||\r\n            score > animeListSeasonState.score\r\n          );\r\n        });\r\n        if (\r\n          animeListSeasonState.season !==\r\n            animeListSeasonStream.currentState().currentSeasonOnDestroy ||\r\n          animeListSeasonState.year !==\r\n            animeListSeasonStream.currentState().currentYearOnDestroy\r\n        ) {\r\n          animeListSeasonStream.updateData({\r\n            currentPage: 1,\r\n          });\r\n        }\r\n        animeListSeasonStream.updateData({\r\n          dataDetail: filteredData,\r\n          dataDetailOriginal: v,\r\n          isFetching: false,\r\n          isSmoothScroll: false,\r\n        });\r\n        animeListSeasonStream.updateDataQuick({ isInit: false });\r\n        if (\r\n          animeListSeasonStream.currentState().maxPage <\r\n          animeListSeasonStream.currentState().currentPage\r\n        ) {\r\n          animeListSeasonStream.updateData({ currentPage: 1 });\r\n        }\r\n        animeListSeasonStream.updateDataQuick({\r\n          currentPageOnDestroy:\r\n            animeListSeasonStream.currentState().currentPage,\r\n          currentSeasonOnDestroy: animeListSeasonStream.currentState().season,\r\n          currentYearOnDestroy: animeListSeasonStream.currentState().year,\r\n        });\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  };\r\n};\r\n\r\nexport const listenWhenOptionChange = (\r\n  animeListSeasonState,\r\n  selectSeason,\r\n  selectYear,\r\n  selectScore\r\n) => {\r\n  return () => {\r\n    if (selectSeason.current && selectYear.current) {\r\n      selectSeason.current.value = animeListSeasonState.season;\r\n      selectYear.current.value = animeListSeasonState.year;\r\n    }\r\n    const input = document.querySelector(\".wrapper-search-anime-list input\");\r\n    if (input && input.value.trim() === \"\")\r\n      input.value = animeListSeasonState.textSearch;\r\n\r\n    const subscription3 = changeCurrentPage$().subscribe();\r\n    let subscription4;\r\n    if (selectYear.current && selectSeason.current && selectScore.current)\r\n      subscription4 = changeSeasonYear$(\r\n        selectYear.current,\r\n        selectSeason.current,\r\n        selectScore.current\r\n      ).subscribe(([year, season, score]) => {\r\n        if (!animeListSeasonStream.currentState().isInit)\r\n          animeListSeasonStream.updateData({\r\n            triggerScroll: !animeListSeasonStream.currentState().triggerScroll,\r\n            isSmoothScroll: false,\r\n            isInit: false,\r\n          });\r\n        animeListSeasonStream.updateSeasonYear(season, year, score);\r\n      });\r\n    return () => {\r\n      subscription4 && subscription4.unsubscribe();\r\n      subscription3.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  };\r\n};\r\n\r\nexport function checkAnimeIncludeGenre(genresAnime, genreCheckMalId) {\r\n  let check = false;\r\n  if (genreCheckMalId === \"0\") {\r\n    return true;\r\n  }\r\n  genresAnime.forEach((genre) => {\r\n    if (genre.mal_id.toString() === genreCheckMalId) {\r\n      check = true;\r\n    }\r\n  });\r\n  return check;\r\n}\r\n\r\nexport function limitAdultGenre(genres) {\r\n  let check = true;\r\n  genres.forEach((genre) => {\r\n    if (genre.name === \"Hentai\") {\r\n      check = false;\r\n    }\r\n  });\r\n  return check;\r\n}\r\n"],"sourceRoot":""}