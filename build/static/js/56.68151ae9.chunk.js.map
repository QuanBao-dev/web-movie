{"version":3,"sources":["Hook/reviews.js","Functions/reviews.js","components/Reviews/Reviews.js"],"names":["useInitReviewsState","setReviewState","useEffect","subscription","reviewsStream","subscribe","init","unsubscribe","initReviewState","useResetReviewsState","malId","previousMalId","currentState","reviewsData","length","updateData","shouldUpdatePageReviewData","pageReviewsData","pageSplit","isStopFetchingReviews","pageReviewsOnDestroy","resetReviewsState","useUpdatePageScrolling","updatePageScrolling$","parseInt","updatePageScrolling","useFetchReviewsData","type","timer","pipe","takeWhile","filter","switchMapTo","fetchReviewsData$","v","error","updatedAnime","concat","animeDetailStream","fetchReviewsData","ReviewItem","loadable","Reviews","useState","reviewState","className","style","boxShadow","CircularProgress","color","size","slice","map","review","index","key"],"mappings":"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","file":"static/js/56.68151ae9.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport {\r\n  initReviewState,\r\n  resetReviewsState,\r\n  updatePageScrolling,\r\n  fetchReviewsData,\r\n} from \"../Functions/reviews\";\r\nexport const useInitReviewsState = (setReviewState) => {\r\n  useEffect(initReviewState(setReviewState), []);\r\n};\r\n\r\nexport const useResetReviewsState = (malId, { previousMalId }) => {\r\n  useEffect(resetReviewsState(malId), [malId, previousMalId]);\r\n};\r\n\r\nexport const useUpdatePageScrolling = ({\r\n  pageReviewsData,\r\n  shouldUpdatePageReviewData,\r\n}) => {\r\n  useEffect(updatePageScrolling(shouldUpdatePageReviewData), [\r\n    pageReviewsData,\r\n    shouldUpdatePageReviewData,\r\n  ]);\r\n};\r\n\r\nexport const useFetchReviewsData = (\r\n  { pageReviewsData, reviewsData },\r\n  malId,\r\n  type\r\n) => {\r\n  useEffect(fetchReviewsData(pageReviewsData, reviewsData, malId, type), [\r\n    malId,\r\n    pageReviewsData,\r\n  ]);\r\n};\r\n","import { timer } from 'rxjs';\r\nimport { filter, switchMapTo, takeWhile } from 'rxjs/operators';\r\n\r\nimport { animeDetailStream } from '../epics/animeDetail';\r\nimport { fetchReviewsData$, reviewsStream, updatePageScrolling$ } from '../epics/reviews';\r\n\r\nexport const initReviewState = (setReviewState) => {\r\n  return () => {\r\n    const subscription = reviewsStream.subscribe(setReviewState);\r\n    reviewsStream.init();\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  };\r\n};\r\n\r\nexport const resetReviewsState = (malId) => {\r\n  return () => {\r\n    if (\r\n      reviewsStream.currentState().reviewsData.length === 0 ||\r\n      reviewsStream.currentState().previousMalId !== malId\r\n    ) {\r\n      reviewsStream.updateData({\r\n        shouldUpdatePageReviewData: true,\r\n        reviewsData: [],\r\n        pageReviewsData: 1,\r\n        pageSplit: 1,\r\n        isStopFetchingReviews: null,\r\n        pageReviewsOnDestroy: null,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updatePageScrolling = (shouldUpdatePageReviewData) => {\r\n  return () => {\r\n    const subscription = updatePageScrolling$().subscribe(() => {\r\n      if (\r\n        shouldUpdatePageReviewData &&\r\n        reviewsStream.currentState().pageSplit >\r\n          reviewsStream.currentState().reviewsData.length\r\n      ) {\r\n        if (\r\n          parseInt(reviewsStream.currentState().reviewsData.length / 20 + 1) !==\r\n          reviewsStream.currentState().reviewsData.length / 20 + 1\r\n        ) {\r\n          reviewsStream.updateData({\r\n            isStopFetchingReviews: true,\r\n          });\r\n        } else {\r\n          reviewsStream.updateData({\r\n            pageReviewsData:\r\n              reviewsStream.currentState().reviewsData.length / 20 + 1,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return () => {\r\n      subscription && subscription.unsubscribe();\r\n    };\r\n  };\r\n};\r\n\r\nexport const fetchReviewsData = (pageReviewsData, reviewsData, malId, type) => {\r\n  return () => {\r\n    const subscription = timer(0)\r\n      .pipe(\r\n        takeWhile(\r\n          () =>\r\n            reviewsStream.currentState().pageReviewsOnDestroy !==\r\n              pageReviewsData &&\r\n            reviewsStream.currentState().isStopFetchingReviews === false\r\n        ),\r\n        filter(() => reviewsStream.currentState().pageReviewsData > 1),\r\n        switchMapTo(\r\n          fetchReviewsData$(malId, reviewsStream.currentState().pageReviewsData, type)\r\n        )\r\n      )\r\n      .subscribe((v) => {\r\n        if (v && !v.error) {\r\n          let updatedAnime;\r\n          if (\r\n            reviewsStream.currentState().reviewsData.length === 0 ||\r\n            reviewsStream.currentState().previousMalId !== malId\r\n          ) {\r\n            updatedAnime = v;\r\n          } else {\r\n            updatedAnime = reviewsData.concat(v);\r\n          }\r\n          if (v.length === 0) {\r\n            reviewsStream.updateData({ isStopFetchingReviews: true });\r\n            return;\r\n          }\r\n          reviewsStream.updateData({\r\n            reviewsData: updatedAnime,\r\n            previousMalId: malId,\r\n            pageReviewsOnDestroy: reviewsStream.currentState().pageReviewsData,\r\n            shouldUpdatePageReviewData: true,\r\n          });\r\n          if (updatedAnime.length > 0)\r\n            animeDetailStream.updateData({\r\n              malId: animeDetailStream.currentState().malId,\r\n            });\r\n        } else {\r\n          reviewsStream.updateData({\r\n            isStopFetchingReviews: true,\r\n            shouldUpdatePageReviewData: false,\r\n          });\r\n        }\r\n      });\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  };\r\n};\r\n","import \"./Reviews.css\";\r\n\r\nimport loadable from \"@loadable/component\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { reviewsStream } from \"../../epics/reviews\";\r\nimport {\r\n  useInitReviewsState,\r\n  useResetReviewsState,\r\n  useUpdatePageScrolling,\r\n  useFetchReviewsData,\r\n} from \"../../Hook/reviews\";\r\n\r\nconst ReviewItem = loadable(() => import(\"../ReviewItem/ReviewItem\"));\r\n\r\nconst Reviews = ({ malId, type }) => {\r\n  const [reviewState, setReviewState] = useState(reviewsStream.currentState());\r\n  useInitReviewsState(setReviewState);\r\n  useResetReviewsState(malId, reviewState);\r\n  useUpdatePageScrolling(reviewState);\r\n  useFetchReviewsData(reviewState, malId, type);\r\n  return (\r\n    <div\r\n      className=\"container-reviews\"\r\n      style={{\r\n        boxShadow: reviewState.reviewsData.length === 0 && \"none\",\r\n      }}\r\n    >\r\n      {(reviewState.isStopFetchingReviews === false ||\r\n        (reviewState && reviewState.reviewsData.length > 0)) && (\r\n        <h1 className=\"title\">Reviews</h1>\r\n      )}\r\n      {reviewState &&\r\n        reviewState.reviewsData.length === 0 &&\r\n        reviewState.isStopFetchingReviews === false && (\r\n          <div className=\"loading-symbol-review\">\r\n            <CircularProgress color=\"secondary\" size=\"3rem\" />\r\n          </div>\r\n        )}\r\n      {reviewState && reviewState.reviewsData.length > 0 && (\r\n        <div className=\"reviews-list-container\">\r\n          {reviewState &&\r\n            reviewState.reviewsData\r\n              .slice(0, reviewState.pageSplit)\r\n              .map((review, index) => (\r\n                <ReviewItem type={type} key={index} review={review} />\r\n              ))}\r\n          {reviewState && !reviewState.isStopFetchingReviews && (\r\n            <div className=\"loading-symbol-review\">\r\n              <CircularProgress color=\"secondary\" size=\"3rem\" />\r\n            </div>\r\n          )}\r\n          {/* {reviewState && reviewState.isStopFetchingReviews && <h1>End</h1>} */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n"],"sourceRoot":""}