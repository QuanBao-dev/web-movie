{"version":3,"sources":["components/ListInformation/ListInformation.js"],"names":["dataLinkList","name","route","ListInformation","arrKeys","isLoading","type","color","size","map","v","index","animeDetailStream","currentState","dataInformationAnime","key","style","lineHeight","fontFamily","padding","backgroundColor","borderRadius","capitalizeString","length","isNotContainedObject","forEach","anime","array","className","to","mal_id","replace","href","url","target","rel","textTransform","i","related","Object","keys","toLocaleLowerCase","aired","string"],"mappings":"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","file":"static/js/63.a5e9cb0c.chunk.js","sourcesContent":["import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { animeDetailStream, capitalizeString } from \"../../epics/animeDetail\";\r\n\r\nconst dataLinkList = [\r\n  { name: \"explicit_genres\", route: \"genre=\" },\r\n  { name: \"genres\", route: \"genres=\" },\r\n  { name: \"producers\", route: \"producers=\" },\r\n  { name: \"licensors\", route: \"producers=\" },\r\n  { name: \"studios\", route: \"producers=\" },\r\n  { name: \"themes\", route: \"genres=\" },\r\n  { name: \"demographics\", route: \"genres=\" },\r\n  { name: \"serializations\", route: \"magazines=\" },\r\n];\r\nfunction ListInformation({ arrKeys, isLoading, type }) {\r\n  return (\r\n    <ul>\r\n      {isLoading !== null && isLoading === true && (\r\n        <CircularProgress color=\"secondary\" size=\"4rem\" />\r\n      )}\r\n      {isLoading === false &&\r\n        arrKeys &&\r\n        arrKeys.map((v, index) => {\r\n          if (v === \"titles\") return undefined;\r\n          if (\r\n            typeof animeDetailStream.currentState().dataInformationAnime[v] !==\r\n            \"object\"\r\n          ) {\r\n            if (v !== \"rank\" && v !== \"popularity\" && v !== \"score\")\r\n              return (\r\n                <li key={index} style={{ lineHeight: \"2.3rem\" }}>\r\n                  <span\r\n                    style={{\r\n                      fontFamily: \"Arial\",\r\n                      padding: \"8px\",\r\n                      backgroundColor: \"#353940\",\r\n                      borderRadius: \"10px\",\r\n                    }}\r\n                  >\r\n                    {capitalizeString(v)}:\r\n                  </span>{\" \"}\r\n                  {`${\r\n                    animeDetailStream.currentState().dataInformationAnime[v]\r\n                  }`}\r\n                </li>\r\n              );\r\n            else\r\n              return (\r\n                <li key={index} style={{ lineHeight: \"2.3rem\" }}>\r\n                  <span\r\n                    style={{\r\n                      fontFamily: \"Arial\",\r\n                      padding: \"8px\",\r\n                      backgroundColor: \"#353940\",\r\n                      borderRadius: \"10px\",\r\n                    }}\r\n                  >\r\n                    {capitalizeString(v)}:\r\n                  </span>{\" \"}\r\n                  <span\r\n                    style={\r\n                      v === \"rank\"\r\n                        ? {\r\n                            color:\r\n                              animeDetailStream.currentState()\r\n                                .dataInformationAnime[v] <= 500\r\n                                ? \"Yellow\"\r\n                                : animeDetailStream.currentState()\r\n                                    .dataInformationAnime[v] <= 3000\r\n                                ? \"#8b8bff\"\r\n                                : \"inherit\",\r\n                          }\r\n                        : v === \"popularity\"\r\n                        ? {\r\n                            color:\r\n                              animeDetailStream.currentState()\r\n                                .dataInformationAnime[v] <= 1000\r\n                                ? \"Yellow\"\r\n                                : animeDetailStream.currentState()\r\n                                    .dataInformationAnime[v] <= 2000\r\n                                ? \"#8b8bff\"\r\n                                : \"inherit\",\r\n                          }\r\n                        : v === \"score\"\r\n                        ? {\r\n                            color:\r\n                              animeDetailStream.currentState()\r\n                                .dataInformationAnime[v] >= 8\r\n                                ? \"Yellow\"\r\n                                : animeDetailStream.currentState()\r\n                                    .dataInformationAnime[v] >= 6\r\n                                ? \"#8b8bff\"\r\n                                : \"inherit\",\r\n                          }\r\n                        : {}\r\n                    }\r\n                  >\r\n                    {`${\r\n                      animeDetailStream.currentState().dataInformationAnime[v]\r\n                    }`}\r\n                  </span>\r\n                </li>\r\n              );\r\n          }\r\n\r\n          if (\r\n            animeDetailStream.currentState().dataInformationAnime[v] &&\r\n            animeDetailStream.currentState().dataInformationAnime[v].length\r\n          ) {\r\n            let isNotContainedObject = true;\r\n            animeDetailStream\r\n              .currentState()\r\n              .dataInformationAnime[v].forEach((anime) => {\r\n                if (typeof anime === \"object\") {\r\n                  isNotContainedObject = false;\r\n                }\r\n              });\r\n            if (!isNotContainedObject) {\r\n              const array =\r\n                animeDetailStream.currentState().dataInformationAnime[v];\r\n              return (\r\n                <li key={index}>\r\n                  <ul className=\"title-synonym-list\">\r\n                    <span className=\"title-capitalize\">\r\n                      {capitalizeString(v)}\r\n                    </span>\r\n                    {array.map((anime, index) => {\r\n                      if (v === \"authors\") {\r\n                        return (\r\n                          <Link to={\"/person/\" + anime.mal_id} key={index}>\r\n                            <li className=\"click-able-info\" key={index}>\r\n                              {anime.name.replace(\",\", \"\")}\r\n                            </li>\r\n                          </Link>\r\n                        );\r\n                      }\r\n                      if (v === \"external_links\") {\r\n                        return (\r\n                          <a\r\n                            key={index}\r\n                            href={anime.url}\r\n                            target={\"_blank\"}\r\n                            rel={\"noopener noreferrer\"}\r\n                            style={{\r\n                              textTransform: \"capitalize\",\r\n                            }}\r\n                          >\r\n                            <li className=\"click-able-info\">\r\n                              {anime.name.length\r\n                                ? anime.name\r\n                                : anime.url\r\n                                    .replace(\"https://\", \"\")\r\n                                    .replace(/\\/[a-z/A-Z_(!@#$%^&*)]+/g, \"\")\r\n                                    .replace(/\\./g, \" \")}\r\n                            </li>\r\n                          </a>\r\n                        );\r\n                      }\r\n                      for (let i = 0; i < dataLinkList.length; i++) {\r\n                        const { name, route } = dataLinkList[i];\r\n                        if (v === name) {\r\n                          return (\r\n                            <Link\r\n                              key={index}\r\n                              to={`/storage/vertical?page=1&${route}${anime.mal_id}&${type}`}\r\n                            >\r\n                              <li className=\"click-able-info\">{anime.name}</li>\r\n                            </Link>\r\n                          );\r\n                        }\r\n                      }\r\n                      return <li key={index}>{anime.name}</li>;\r\n                    })}\r\n                  </ul>\r\n                </li>\r\n              );\r\n            }\r\n            return (\r\n              <li key={index}>\r\n                <ul className=\"title-synonym-list\">\r\n                  <span className=\"title-capitalize\">\r\n                    {v.replace(\"_\", \" \")}\r\n                  </span>\r\n                  {animeDetailStream\r\n                    .currentState()\r\n                    .dataInformationAnime[v].map((anime, key) => {\r\n                      return <li key={key}>{anime}</li>;\r\n                    })}\r\n                </ul>\r\n              </li>\r\n            );\r\n          }\r\n          if (\r\n            animeDetailStream.currentState().dataInformationAnime[v] &&\r\n            animeDetailStream.currentState().dataInformationAnime[v].length !==\r\n              0\r\n          ) {\r\n            if (v === \"related\") {\r\n              const related =\r\n                animeDetailStream.currentState().dataInformationAnime[v];\r\n              return Object.keys(related).map((key) => (\r\n                <li key={key}>\r\n                  <ul className=\"title-synonym-list\">\r\n                    <span className=\"title-capitalize\">\r\n                      {capitalizeString(key)}\r\n                    </span>\r\n                    {related[key].map((anime, index) => {\r\n                      return (\r\n                        <Link\r\n                          key={index}\r\n                          to={\r\n                            `/${type}/` +\r\n                            anime.mal_id +\r\n                            \"-\" +\r\n                            anime.name\r\n                              .replace(/[ /%^&*():.$,]/g, \"-\")\r\n                              .toLocaleLowerCase()\r\n                          }\r\n                        >\r\n                          <li className={\"click-able-info\"}>\r\n                            {anime.name}{\" \"}\r\n                            {anime.type !== \"anime\" && (\r\n                              <span>({capitalizeString(anime.type)})</span>\r\n                            )}\r\n                          </li>\r\n                        </Link>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </li>\r\n              ));\r\n            }\r\n            if (v === \"aired\") {\r\n              const aired =\r\n                animeDetailStream.currentState().dataInformationAnime[v];\r\n              return (\r\n                <li style={{ lineHeight: \"2.3rem\" }} key={index}>\r\n                  <span\r\n                    style={{\r\n                      fontFamily: \"Arial\",\r\n                      padding: \"10px\",\r\n                      backgroundColor: \"rgb(53, 57, 64)\",\r\n                      borderRadius: \"10px\",\r\n                      textTransform: \"capitalize\",\r\n                    }}\r\n                  >\r\n                    {v}\r\n                  </span>{\" \"}\r\n                  {aired.string ? aired.string : \"Unknown\"}\r\n                </li>\r\n              );\r\n            }\r\n          }\r\n          return undefined;\r\n        })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ListInformation;\r\n"],"sourceRoot":""}